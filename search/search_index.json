{"config":{"indexing":"full","lang":["ru"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tinkoff Invest \u0414\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0442\u043e\u0440\u0433\u043e\u0432\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e\u0439 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b pip install tinkoff-investments \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u2611 \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 GRPC \u043a\u043b\u0438\u0435\u043d\u0442 \u2611 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u044f\u0432\u043a\u0438 \u2611 \u0412\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \"\u043e\u0442\" \u0438 \"\u0434\u043e\" \u2611 \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u2611 \u0422\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u041a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 from tinkoff.invest import Client TOKEN = 'token' with Client ( TOKEN ) as client : print ( client . users . get_accounts ()) \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c target \u0412 Tinkoff Invest API \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u043a\u043e\u043d\u0442\u0443\u0440\u0430 - \"\u0431\u043e\u0435\u0432\u043e\u0439\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0440\u0434\u0435\u0440\u043e\u0432 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0438 \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f API \u0438 \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0433\u0438\u043f\u043e\u0442\u0435\u0437, \u0437\u0430\u044f\u0432\u043a\u0438 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430 \u0431\u0438\u0440\u0436\u0443, \u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0435. \u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043d\u0442\u0443\u0440\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0447\u0435\u0440\u0435\u0437 target, INVEST_GRPC_API - \"\u0431\u043e\u0435\u0432\u043e\u0439\", INVEST_GRPC_API_SANDBOX - \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\" from tinkoff.invest import Client from tinkoff.invest.constants import INVEST_GRPC_API TOKEN = 'token' with Client ( TOKEN , target = INVEST_GRPC_API ) as client : print ( client . users . get_accounts ()) :warning: \u041d\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0432 \u043e\u0431\u0449\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 examples . Contribution \u0414\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0445\u043e\u0447\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442. CONTRIBUTING License \u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f The Apache License .","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#tinkoff-invest","text":"\u0414\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0442\u043e\u0440\u0433\u043e\u0432\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e\u0439 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","title":"Tinkoff Invest"},{"location":"#_1","text":"pip install tinkoff-investments","title":"\u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#_2","text":"\u2611 \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 GRPC \u043a\u043b\u0438\u0435\u043d\u0442 \u2611 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u044f\u0432\u043a\u0438 \u2611 \u0412\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \"\u043e\u0442\" \u0438 \"\u0434\u043e\" \u2611 \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u2611 \u0422\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438"},{"location":"#_3","text":"","title":"\u041a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f"},{"location":"#_4","text":"from tinkoff.invest import Client TOKEN = 'token' with Client ( TOKEN ) as client : print ( client . users . get_accounts ())","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432"},{"location":"#target","text":"\u0412 Tinkoff Invest API \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u043a\u043e\u043d\u0442\u0443\u0440\u0430 - \"\u0431\u043e\u0435\u0432\u043e\u0439\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0440\u0434\u0435\u0440\u043e\u0432 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0438 \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f API \u0438 \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0433\u0438\u043f\u043e\u0442\u0435\u0437, \u0437\u0430\u044f\u0432\u043a\u0438 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430 \u0431\u0438\u0440\u0436\u0443, \u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0435. \u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043d\u0442\u0443\u0440\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0447\u0435\u0440\u0435\u0437 target, INVEST_GRPC_API - \"\u0431\u043e\u0435\u0432\u043e\u0439\", INVEST_GRPC_API_SANDBOX - \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\" from tinkoff.invest import Client from tinkoff.invest.constants import INVEST_GRPC_API TOKEN = 'token' with Client ( TOKEN , target = INVEST_GRPC_API ) as client : print ( client . users . get_accounts ()) :warning: \u041d\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0432 \u043e\u0431\u0449\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 examples .","title":"\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c target"},{"location":"#contribution","text":"\u0414\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0445\u043e\u0447\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442. CONTRIBUTING","title":"Contribution"},{"location":"#license","text":"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f The Apache License .","title":"License"},{"location":"CHANGELOG/","text":"Changelog 0.2.0-beta46 (2023-01-18) Fixes fix instrument_uid to instrument_id ( #179 ) Docs update changelog Others update workflows ( #175 ) Full set of changes: 0.2.0-beta45...0.2.0-beta46 0.2.0-beta45 (2023-01-09) New Features get_sandbox_withdraw_limits fix ( #173 ) Fixes fix sandbox get_operations_by_cursor ( #167 ) Docs fix deps ( #168 ) Full set of changes: 0.2.0-beta44...0.2.0-beta45 0.2.0-beta44 (2022-12-18) New Features release ( #166 ) contracts v1.0.19 ( #163 ) Docs fix edit_uri ( #159 ) Full set of changes: 0.2.0-beta43...0.2.0-beta44 0.2.0-beta43 (2022-12-02) New Features new contract support v1.0.18 ( #157 ) Others bump 0.2.0-beta43 ( #158 ) Full set of changes: 0.2.0-beta42...0.2.0-beta43 0.2.0-beta42 (2022-11-28) New Features new contract support ( #153 ) add py.typed ( #150 ) windows ci test ( #140 ) Docs update changelog Full set of changes: 0.2.0-beta41...0.2.0-beta42 0.2.0-beta41 (2022-11-16) Fixes fix initializing an empty message #99 ( #147 ) test only if needed ( #142 ) rm strftime ( #133 ) skip if no trades on the exchange ( #131 ) Docs update documentation ( #145 ) update documentation ( #143 ) include examples to docs ( #139 ) update changelog Others add ruff linter ( #146 ) fix tests ( #135 ) Full set of changes: 0.2.0-beta40...0.2.0-beta41 0.2.0-beta40 (2022-10-25) New Features update grpc, support api v1.0.15 Fixes test Docs update changelog Full set of changes: 0.2.0-beta39...0.2.0-beta40 0.2.0-beta39 (2022-10-10) New Features new contract support ( #126 ) add sandbox GitHub actions ( #125 ) deduplicate candles ( #118 ) arithmetics for Quotation ( #119 ) Docs update changelog Full set of changes: 0.2.0-beta38...0.2.0-beta39 0.2.0-beta38 (2022-09-29) Fixes fix ReplaceSandboxOrder Docs update contributing update changelog Others fix makefile Full set of changes: 0.2.0-beta37...0.2.0-beta38 0.2.0-beta37 (2022-09-29) New Features update dependencies Fixes fix repeated fields in PositionData ( #121 ) Docs add sandbox description ( #117 ) add api reference update readme update changelog Others fix poetry version Full set of changes: 0.2.0-beta36...0.2.0-beta37 0.2.0-beta36 (2022-09-10) New Features sleep if exhausted ( #106 ) Fixes positions_stream model, add example ( #115 ) Docs update changelog Full set of changes: 0.2.0-beta35...0.2.0-beta36 0.2.0-beta35 (2022-08-30) New Features support v1.0.12 Fixes format code in issue template ( #108 ) Docs update changelog Full set of changes: 0.2.0-beta34...0.2.0-beta35 0.2.0-beta34 (2022-08-27) New Features sandbox client ( #110 ) Feature instrument caching ( #92 ) Fixes fix get operations by cursor ( #109 ) Refactorings add cachetools Docs update changelog Others fix bandit add bandit Full set of changes: 0.2.0-beta33...0.2.0-beta34 0.2.0-beta33 (2022-08-04) New Features support grpc V1.0.11 Fixes fix is complete caching ( #84 ) Docs update changelog Full set of changes: 0.2.0-beta32...0.2.0-beta33 0.2.0-beta32 (2022-07-07) Fixes rm excess await ( #88 ) Docs add examples update changelog Others ignore merge into message ( #89 ) Full set of changes: 0.2.0-beta31...0.2.0-beta32 0.2.0-beta31 (2022-07-04) New Features add OperationsStreamService Docs update pydocs update changelog Full set of changes: 0.2.0-beta30...0.2.0-beta31 0.2.0-beta30 (2022-06-07) New Features support v1.0.8 methods Fixes skip PLACEHOLDER Docs update changelog Full set of changes: 0.2.0-beta29...0.2.0-beta30 0.2.0-beta29 (2022-06-01) New Features support v1.0.8 schemas Docs update changelog Full set of changes: 0.2.0-beta28...0.2.0-beta29 0.2.0-beta28 (2022-05-23) New Features add target arg Fixes Fix min() arg is an empty sequence error on get_all_candles ( #71 ) Docs update changelog Others Fix gitlint Full set of changes: 0.2.0-beta27...0.2.0-beta28 0.2.0-beta27 (2022-05-11) Fixes add dateutil ( #66 ) add gitlint to pyproject.toml Docs update changelog Others fix make git-lint Full set of changes: 0.2.0-beta26...0.2.0-beta27 0.2.0-beta26 (2022-05-07)","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#020-beta46-2023-01-18","text":"","title":"0.2.0-beta46 (2023-01-18)"},{"location":"CHANGELOG/#fixes","text":"fix instrument_uid to instrument_id ( #179 )","title":"Fixes"},{"location":"CHANGELOG/#docs","text":"update changelog","title":"Docs"},{"location":"CHANGELOG/#others","text":"update workflows ( #175 ) Full set of changes: 0.2.0-beta45...0.2.0-beta46","title":"Others"},{"location":"CHANGELOG/#020-beta45-2023-01-09","text":"","title":"0.2.0-beta45 (2023-01-09)"},{"location":"CHANGELOG/#new-features","text":"get_sandbox_withdraw_limits fix ( #173 )","title":"New Features"},{"location":"CHANGELOG/#fixes_1","text":"fix sandbox get_operations_by_cursor ( #167 )","title":"Fixes"},{"location":"CHANGELOG/#docs_1","text":"fix deps ( #168 ) Full set of changes: 0.2.0-beta44...0.2.0-beta45","title":"Docs"},{"location":"CHANGELOG/#020-beta44-2022-12-18","text":"","title":"0.2.0-beta44 (2022-12-18)"},{"location":"CHANGELOG/#new-features_1","text":"release ( #166 ) contracts v1.0.19 ( #163 )","title":"New Features"},{"location":"CHANGELOG/#docs_2","text":"fix edit_uri ( #159 ) Full set of changes: 0.2.0-beta43...0.2.0-beta44","title":"Docs"},{"location":"CHANGELOG/#020-beta43-2022-12-02","text":"","title":"0.2.0-beta43 (2022-12-02)"},{"location":"CHANGELOG/#new-features_2","text":"new contract support v1.0.18 ( #157 )","title":"New Features"},{"location":"CHANGELOG/#others_1","text":"bump 0.2.0-beta43 ( #158 ) Full set of changes: 0.2.0-beta42...0.2.0-beta43","title":"Others"},{"location":"CHANGELOG/#020-beta42-2022-11-28","text":"","title":"0.2.0-beta42 (2022-11-28)"},{"location":"CHANGELOG/#new-features_3","text":"new contract support ( #153 ) add py.typed ( #150 ) windows ci test ( #140 )","title":"New Features"},{"location":"CHANGELOG/#docs_3","text":"update changelog Full set of changes: 0.2.0-beta41...0.2.0-beta42","title":"Docs"},{"location":"CHANGELOG/#020-beta41-2022-11-16","text":"","title":"0.2.0-beta41 (2022-11-16)"},{"location":"CHANGELOG/#fixes_2","text":"fix initializing an empty message #99 ( #147 ) test only if needed ( #142 ) rm strftime ( #133 ) skip if no trades on the exchange ( #131 )","title":"Fixes"},{"location":"CHANGELOG/#docs_4","text":"update documentation ( #145 ) update documentation ( #143 ) include examples to docs ( #139 ) update changelog","title":"Docs"},{"location":"CHANGELOG/#others_2","text":"add ruff linter ( #146 ) fix tests ( #135 ) Full set of changes: 0.2.0-beta40...0.2.0-beta41","title":"Others"},{"location":"CHANGELOG/#020-beta40-2022-10-25","text":"","title":"0.2.0-beta40 (2022-10-25)"},{"location":"CHANGELOG/#new-features_4","text":"update grpc, support api v1.0.15","title":"New Features"},{"location":"CHANGELOG/#fixes_3","text":"test","title":"Fixes"},{"location":"CHANGELOG/#docs_5","text":"update changelog Full set of changes: 0.2.0-beta39...0.2.0-beta40","title":"Docs"},{"location":"CHANGELOG/#020-beta39-2022-10-10","text":"","title":"0.2.0-beta39 (2022-10-10)"},{"location":"CHANGELOG/#new-features_5","text":"new contract support ( #126 ) add sandbox GitHub actions ( #125 ) deduplicate candles ( #118 ) arithmetics for Quotation ( #119 )","title":"New Features"},{"location":"CHANGELOG/#docs_6","text":"update changelog Full set of changes: 0.2.0-beta38...0.2.0-beta39","title":"Docs"},{"location":"CHANGELOG/#020-beta38-2022-09-29","text":"","title":"0.2.0-beta38 (2022-09-29)"},{"location":"CHANGELOG/#fixes_4","text":"fix ReplaceSandboxOrder","title":"Fixes"},{"location":"CHANGELOG/#docs_7","text":"update contributing update changelog","title":"Docs"},{"location":"CHANGELOG/#others_3","text":"fix makefile Full set of changes: 0.2.0-beta37...0.2.0-beta38","title":"Others"},{"location":"CHANGELOG/#020-beta37-2022-09-29","text":"","title":"0.2.0-beta37 (2022-09-29)"},{"location":"CHANGELOG/#new-features_6","text":"update dependencies","title":"New Features"},{"location":"CHANGELOG/#fixes_5","text":"fix repeated fields in PositionData ( #121 )","title":"Fixes"},{"location":"CHANGELOG/#docs_8","text":"add sandbox description ( #117 ) add api reference update readme update changelog","title":"Docs"},{"location":"CHANGELOG/#others_4","text":"fix poetry version Full set of changes: 0.2.0-beta36...0.2.0-beta37","title":"Others"},{"location":"CHANGELOG/#020-beta36-2022-09-10","text":"","title":"0.2.0-beta36 (2022-09-10)"},{"location":"CHANGELOG/#new-features_7","text":"sleep if exhausted ( #106 )","title":"New Features"},{"location":"CHANGELOG/#fixes_6","text":"positions_stream model, add example ( #115 )","title":"Fixes"},{"location":"CHANGELOG/#docs_9","text":"update changelog Full set of changes: 0.2.0-beta35...0.2.0-beta36","title":"Docs"},{"location":"CHANGELOG/#020-beta35-2022-08-30","text":"","title":"0.2.0-beta35 (2022-08-30)"},{"location":"CHANGELOG/#new-features_8","text":"support v1.0.12","title":"New Features"},{"location":"CHANGELOG/#fixes_7","text":"format code in issue template ( #108 )","title":"Fixes"},{"location":"CHANGELOG/#docs_10","text":"update changelog Full set of changes: 0.2.0-beta34...0.2.0-beta35","title":"Docs"},{"location":"CHANGELOG/#020-beta34-2022-08-27","text":"","title":"0.2.0-beta34 (2022-08-27)"},{"location":"CHANGELOG/#new-features_9","text":"sandbox client ( #110 ) Feature instrument caching ( #92 )","title":"New Features"},{"location":"CHANGELOG/#fixes_8","text":"fix get operations by cursor ( #109 )","title":"Fixes"},{"location":"CHANGELOG/#refactorings","text":"add cachetools","title":"Refactorings"},{"location":"CHANGELOG/#docs_11","text":"update changelog","title":"Docs"},{"location":"CHANGELOG/#others_5","text":"fix bandit add bandit Full set of changes: 0.2.0-beta33...0.2.0-beta34","title":"Others"},{"location":"CHANGELOG/#020-beta33-2022-08-04","text":"","title":"0.2.0-beta33 (2022-08-04)"},{"location":"CHANGELOG/#new-features_10","text":"support grpc V1.0.11","title":"New Features"},{"location":"CHANGELOG/#fixes_9","text":"fix is complete caching ( #84 )","title":"Fixes"},{"location":"CHANGELOG/#docs_12","text":"update changelog Full set of changes: 0.2.0-beta32...0.2.0-beta33","title":"Docs"},{"location":"CHANGELOG/#020-beta32-2022-07-07","text":"","title":"0.2.0-beta32 (2022-07-07)"},{"location":"CHANGELOG/#fixes_10","text":"rm excess await ( #88 )","title":"Fixes"},{"location":"CHANGELOG/#docs_13","text":"add examples update changelog","title":"Docs"},{"location":"CHANGELOG/#others_6","text":"ignore merge into message ( #89 ) Full set of changes: 0.2.0-beta31...0.2.0-beta32","title":"Others"},{"location":"CHANGELOG/#020-beta31-2022-07-04","text":"","title":"0.2.0-beta31 (2022-07-04)"},{"location":"CHANGELOG/#new-features_11","text":"add OperationsStreamService","title":"New Features"},{"location":"CHANGELOG/#docs_14","text":"update pydocs update changelog Full set of changes: 0.2.0-beta30...0.2.0-beta31","title":"Docs"},{"location":"CHANGELOG/#020-beta30-2022-06-07","text":"","title":"0.2.0-beta30 (2022-06-07)"},{"location":"CHANGELOG/#new-features_12","text":"support v1.0.8 methods","title":"New Features"},{"location":"CHANGELOG/#fixes_11","text":"skip PLACEHOLDER","title":"Fixes"},{"location":"CHANGELOG/#docs_15","text":"update changelog Full set of changes: 0.2.0-beta29...0.2.0-beta30","title":"Docs"},{"location":"CHANGELOG/#020-beta29-2022-06-01","text":"","title":"0.2.0-beta29 (2022-06-01)"},{"location":"CHANGELOG/#new-features_13","text":"support v1.0.8 schemas","title":"New Features"},{"location":"CHANGELOG/#docs_16","text":"update changelog Full set of changes: 0.2.0-beta28...0.2.0-beta29","title":"Docs"},{"location":"CHANGELOG/#020-beta28-2022-05-23","text":"","title":"0.2.0-beta28 (2022-05-23)"},{"location":"CHANGELOG/#new-features_14","text":"add target arg","title":"New Features"},{"location":"CHANGELOG/#fixes_12","text":"Fix min() arg is an empty sequence error on get_all_candles ( #71 )","title":"Fixes"},{"location":"CHANGELOG/#docs_17","text":"update changelog","title":"Docs"},{"location":"CHANGELOG/#others_7","text":"Fix gitlint Full set of changes: 0.2.0-beta27...0.2.0-beta28","title":"Others"},{"location":"CHANGELOG/#020-beta27-2022-05-11","text":"","title":"0.2.0-beta27 (2022-05-11)"},{"location":"CHANGELOG/#fixes_13","text":"add dateutil ( #66 ) add gitlint to pyproject.toml","title":"Fixes"},{"location":"CHANGELOG/#docs_18","text":"update changelog","title":"Docs"},{"location":"CHANGELOG/#others_8","text":"fix make git-lint Full set of changes: 0.2.0-beta26...0.2.0-beta27","title":"Others"},{"location":"CHANGELOG/#020-beta26-2022-05-07","text":"","title":"0.2.0-beta26 (2022-05-07)"},{"location":"CONTRIBUTING/","text":"Contributing \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 Tinkoff Invest! \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 fork \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0421\u043a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 \u0441\u0432\u043e\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 git clone https://github.com/Tinkoff/invest-python.git \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0434\u043b\u044f \u0432\u0430\u0448\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 git checkout -b branch_name \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435 (\u0441\u043c. \u043d\u0438\u0436\u0435) \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u043e\u0434 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441\u0432\u043e\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u0424\u043e\u0440\u043c\u0430\u0442 \u043e\u043f\u0438\u0441\u0430\u043d \u043d\u0438\u0436\u0435 git add . git commit -m \"feat: add new feature\" \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 github git push \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 Pull Request \u0432 \u044d\u0442\u043e\u0442 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 Commit Message Format \u041c\u044b \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u0441\u044f \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0439 Conventional Commits \u0434\u043b\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432. A specification for adding human and machine readable meaning to commit messages. Body \u0438 Footer \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u044e. Commit Message Header <type>(<scope>): <short summary> \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Summary in present tense. Not capitalized. No period at the end. \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Commit Scope: grpc, async, mypy, schemas, sandbox \u2502 \u2514\u2500\u2af8 Commit Type: feat|fix|build|ci|docs|perf|refactor|test|chore Type feat Features A new feature fix Bug Fixes A bug fix docs Documentation Documentation only changes style Styles Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor Code Refactoring A code change that neither fixes a bug nor adds a feature perf Performance Improvements A code change that improves performance test Tests Adding missing tests or correcting existing tests build Builds Changes that affect the build system or external dependencies (example scopes: mypy, pip, pytest) ci Continuous Integrations Changes to our CI configuration files and scripts (example scopes: Github Actions) chore Chores Other changes that don't modify src or test files revert Reverts Reverts a previous commit \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435 \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c poetry . \u0422\u0430\u043a\u0436\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u0441\u043a \u0440\u0430\u043d\u043d\u0435\u0440 make. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 pip install poetry make install \u0417\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u043e\u0432 make test \u0417\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 make lint make git-lint Using gitlint as a commit-msg hook gitlint install-hook # To remove the hook gitlint uninstall-hook \u0417\u0430\u043f\u0443\u0441\u043a \u0430\u0432\u0442\u043e\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f make format \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432 make download-protos \u041f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0432\u0435\u0442\u043a\u0438 main . \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 make gen-grpc \u0417\u0430\u0442\u0435\u043c, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0443\u043b\u0438: - tinkoff/invest/__init__.py - tinkoff/invest/async_services.py - tinkoff/invest/schemas.py - tinkoff/invest/services.py \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u041c\u043e\u0436\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u043e \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. make gen-client Release \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 make bump-version v=<new-version> \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e. \u0414\u0430\u043b\u0435\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0435\u0432\u044c\u044e \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c tag \u043a\u043e\u043c\u043c\u0438\u0442\u0443 \u0432 \u0432\u0435\u0442\u043a\u0435 \u043c\u0430\u0441\u0442\u0435\u0440 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440. \u041f\u043e\u0441\u043b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 tag-\u0430 \u0432 github git push --tags , \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u0430 \u0434\u0436\u043e\u0431\u0430 publish_pypi . \u0421\u0442\u043e\u0438\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e make bump-version , \u043a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u044b\u043b\u0438 \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u0433\u0438\u0442\u0435.","title":"\u0423\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435"},{"location":"CONTRIBUTING/#contributing","text":"\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 Tinkoff Invest!","title":"Contributing"},{"location":"CONTRIBUTING/#_1","text":"\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 fork \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0421\u043a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 \u0441\u0432\u043e\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 git clone https://github.com/Tinkoff/invest-python.git \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0434\u043b\u044f \u0432\u0430\u0448\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 git checkout -b branch_name \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435 (\u0441\u043c. \u043d\u0438\u0436\u0435) \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u043e\u0434 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441\u0432\u043e\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439. \u0424\u043e\u0440\u043c\u0430\u0442 \u043e\u043f\u0438\u0441\u0430\u043d \u043d\u0438\u0436\u0435 git add . git commit -m \"feat: add new feature\" \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 github git push \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 Pull Request \u0432 \u044d\u0442\u043e\u0442 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442"},{"location":"CONTRIBUTING/#commit-message-format","text":"\u041c\u044b \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u0441\u044f \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0439 Conventional Commits \u0434\u043b\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432. A specification for adding human and machine readable meaning to commit messages. Body \u0438 Footer \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e \u0436\u0435\u043b\u0430\u043d\u0438\u044e.","title":"Commit Message Format"},{"location":"CONTRIBUTING/#commit-message-header","text":"<type>(<scope>): <short summary> \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Summary in present tense. Not capitalized. No period at the end. \u2502 \u2502 \u2502 \u2514\u2500\u2af8 Commit Scope: grpc, async, mypy, schemas, sandbox \u2502 \u2514\u2500\u2af8 Commit Type: feat|fix|build|ci|docs|perf|refactor|test|chore","title":"Commit Message Header"},{"location":"CONTRIBUTING/#type","text":"feat Features A new feature fix Bug Fixes A bug fix docs Documentation Documentation only changes style Styles Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor Code Refactoring A code change that neither fixes a bug nor adds a feature perf Performance Improvements A code change that improves performance test Tests Adding missing tests or correcting existing tests build Builds Changes that affect the build system or external dependencies (example scopes: mypy, pip, pytest) ci Continuous Integrations Changes to our CI configuration files and scripts (example scopes: Github Actions) chore Chores Other changes that don't modify src or test files revert Reverts Reverts a previous commit","title":"Type"},{"location":"CONTRIBUTING/#_2","text":"\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c poetry . \u0422\u0430\u043a\u0436\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u0441\u043a \u0440\u0430\u043d\u043d\u0435\u0440 make.","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435"},{"location":"CONTRIBUTING/#_3","text":"pip install poetry make install","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439"},{"location":"CONTRIBUTING/#_4","text":"make test","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u043e\u0432"},{"location":"CONTRIBUTING/#_5","text":"make lint make git-lint","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432"},{"location":"CONTRIBUTING/#using-gitlint-as-a-commit-msg-hook","text":"gitlint install-hook # To remove the hook gitlint uninstall-hook","title":"Using gitlint as a commit-msg hook"},{"location":"CONTRIBUTING/#_6","text":"make format","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0430\u0432\u0442\u043e\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"CONTRIBUTING/#proto","text":"make download-protos \u041f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0432\u0435\u0442\u043a\u0438 main .","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"CONTRIBUTING/#_7","text":"make gen-grpc \u0417\u0430\u0442\u0435\u043c, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0443\u043b\u0438: - tinkoff/invest/__init__.py - tinkoff/invest/async_services.py - tinkoff/invest/schemas.py - tinkoff/invest/services.py","title":"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"CONTRIBUTING/#proto_1","text":"\u041c\u043e\u0436\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u043e \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. make gen-client","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"CONTRIBUTING/#release","text":"make bump-version v=<new-version> \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e. \u0414\u0430\u043b\u0435\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0435\u0432\u044c\u044e \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c tag \u043a\u043e\u043c\u043c\u0438\u0442\u0443 \u0432 \u0432\u0435\u0442\u043a\u0435 \u043c\u0430\u0441\u0442\u0435\u0440 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440. \u041f\u043e\u0441\u043b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 tag-\u0430 \u0432 github git push --tags , \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u0430 \u0434\u0436\u043e\u0431\u0430 publish_pypi . \u0421\u0442\u043e\u0438\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e make bump-version , \u043a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u044b\u043b\u0438 \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u0433\u0438\u0442\u0435.","title":"Release \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438"},{"location":"examples/","text":"\u0411\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0437\u0434\u0435\u0441\u044c . \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434 examples/all_candles.py import os from datetime import timedelta from tinkoff.invest import CandleInterval , Client from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : for candle in client . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 365 ), interval = CandleInterval . CANDLE_INTERVAL_HOUR , ): print ( candle ) return 0 if __name__ == \"__main__\" : main () \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434 examples/async_all_candles.py import asyncio import os from datetime import timedelta from tinkoff.invest import AsyncClient , CandleInterval from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : async for candle in client . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 365 ), interval = CandleInterval . CANDLE_INTERVAL_HOUR , ): print ( candle ) if __name__ == \"__main__\" : asyncio . run ( main ()) \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f examples/async_client.py import asyncio import os from tinkoff.invest import AsyncClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : print ( await client . users . get_accounts ()) if __name__ == \"__main__\" : asyncio . run ( main ()) \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 examples/async_retrying_client.py import asyncio import logging import os from datetime import timedelta from tinkoff.invest import CandleInterval from tinkoff.invest.retrying.aio.client import AsyncRetryingClient from tinkoff.invest.retrying.settings import RetryClientSettings from tinkoff.invest.utils import now logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] retry_settings = RetryClientSettings ( use_retry = True , max_retry_attempt = 2 ) async def main (): async with AsyncRetryingClient ( TOKEN , settings = retry_settings ) as client : async for candle in client . get_all_candles ( figi = \"BBG000B9XRY4\" , from_ = now () - timedelta ( days = 301 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle ) if __name__ == \"__main__\" : asyncio . run ( main ()) \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u043f\u043e \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u043c \u0441\u0432\u0435\u0447\u0430\u043c \u0438 \u0432\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c examples/async_stream_client.py import asyncio import os from tinkoff.invest import ( AsyncClient , CandleInstrument , MarketDataRequest , SubscribeCandlesRequest , SubscriptionAction , SubscriptionInterval , ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async def request_iterator (): yield MarketDataRequest ( subscribe_candles_request = SubscribeCandlesRequest ( subscription_action = SubscriptionAction . SUBSCRIPTION_ACTION_SUBSCRIBE , instruments = [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ], ) ) while True : await asyncio . sleep ( 1 ) async with AsyncClient ( TOKEN ) as client : async for marketdata in client . market_data_stream . market_data_stream ( request_iterator () ): print ( marketdata ) if __name__ == \"__main__\" : asyncio . run ( main ()) \u041e\u0442\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u0439 examples/cancel_orders.py import logging import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] logger = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO ) def main (): with Client ( TOKEN ) as client : response = client . users . get_accounts () account , * _ = response . accounts account_id = account . id logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) client . cancel_all_orders ( account_id = account . id ) logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) if __name__ == \"__main__\" : main () \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 examples/client.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : print ( client . users . get_accounts ()) if __name__ == \"__main__\" : main () \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u043f\u043e \u0438\u043d\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0443 examples/download_all_candles.py import logging import os from datetime import timedelta from pathlib import Path from tinkoff.invest import CandleInterval , Client from tinkoff.invest.caching.market_data_cache.cache_settings import ( MarketDataCacheSettings , ) from tinkoff.invest.services import MarketDataCache from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) def main (): with Client ( TOKEN ) as client : settings = MarketDataCacheSettings ( base_cache_dir = Path ( \"market_data_cache\" )) market_data_cache = MarketDataCache ( settings = settings , services = client ) for candle in market_data_cache . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 3 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle . time ) return 0 if __name__ == \"__main__\" : main () \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 examples/easy_async_stream_client.py import asyncio import os from tinkoff.invest import ( AsyncClient , CandleInstrument , InfoInstrument , SubscriptionInterval , ) from tinkoff.invest.async_services import AsyncMarketDataStreamManager TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : market_data_stream : AsyncMarketDataStreamManager = ( client . create_market_data_stream () ) market_data_stream . candles . subscribe ( [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ] ) async for marketdata in market_data_stream : print ( marketdata ) market_data_stream . info . subscribe ([ InfoInstrument ( figi = \"BBG004730N88\" )]) if marketdata . subscribe_info_response : market_data_stream . stop () if __name__ == \"__main__\" : asyncio . run ( main ()) \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 examples/easy_stream_client.py import os from tinkoff.invest import ( CandleInstrument , Client , InfoInstrument , SubscriptionInterval , ) from tinkoff.invest.services import MarketDataStreamManager TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : market_data_stream : MarketDataStreamManager = client . create_market_data_stream () market_data_stream . candles . subscribe ( [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ] ) for marketdata in market_data_stream : print ( marketdata ) market_data_stream . info . subscribe ([ InfoInstrument ( figi = \"BBG004730N88\" )]) if marketdata . subscribe_info_response : market_data_stream . stop () if __name__ == \"__main__\" : main () \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u0438\u0445 \u043f\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 examples/get_operations_by_cursor.py import os from tinkoff.invest import Client , GetOperationsByCursorRequest token = os . environ [ \"INVEST_TOKEN\" ] with Client ( token ) as client : accounts = client . users . get_accounts () account_id = accounts . accounts [ 0 ] . id def get_request ( cursor = \"\" ): return GetOperationsByCursorRequest ( account_id = account_id , instrument_id = \"BBG004730N88\" , cursor = cursor , limit = 1 , ) operations = client . operations . get_operations_by_cursor ( get_request ()) print ( operations ) while operations . has_next : request = get_request ( cursor = operations . next_cursor ) operations = client . operations . get_operations_by_cursor ( request ) print ( operations ) \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 examples/instrument_cache.py import logging import os from pprint import pprint from tinkoff.invest import Client , InstrumentIdType from tinkoff.invest.caching.instruments_cache.instruments_cache import InstrumentsCache from tinkoff.invest.caching.instruments_cache.settings import InstrumentsCacheSettings TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( level = logging . INFO ) def main (): with Client ( TOKEN ) as client : inst = client . instruments . etfs () . instruments [ - 1 ] pprint ( inst ) from_server = client . instruments . etf_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_UID , class_code = inst . class_code , id = inst . uid , ) pprint ( from_server ) settings = InstrumentsCacheSettings () instruments_cache = InstrumentsCache ( settings = settings , instruments_service = client . instruments ) from_cache = instruments_cache . etf_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_UID , class_code = inst . class_code , id = inst . uid , ) pprint ( from_cache ) if str ( from_server ) != str ( from_cache ): raise Exception ( \"cache miss\" ) if __name__ == \"__main__\" : main () \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 query examples/instruments.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : r = client . instruments . find_instrument ( query = \"\u0442\u0438\u043d\u044c\u043a\u043e\u0444\u0444\" ) for i in r . instruments : print ( i ) if __name__ == \"__main__\" : main () \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043b\u043e\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a examples/logger.py import logging import os from tinkoff.invest import Client , RequestError TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . INFO ) logger = logging . getLogger ( __name__ ) def main (): with Client ( TOKEN ) as client : _ = client . users . get_accounts () . accounts try : client . users . get_margin_attributes ( account_id = \"123\" ) except RequestError as err : tracking_id = err . metadata . tracking_id if err . metadata else \"\" logger . error ( \"Error tracking_id= %s code= %s \" , tracking_id , str ( err . code )) if __name__ == \"__main__\" : main () \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0440\u0442\u0444\u043e\u043b\u0438\u043e \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 examples/porfolio_stream_client.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : accounts = client . users . get_accounts () for portfolio in client . operations_stream . portfolio_stream ( accounts = [ acc . id for acc in accounts . accounts ] ): print ( portfolio ) if __name__ == \"__main__\" : main () \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 examples/positions_stream.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : response = client . users . get_accounts () accounts = [ account . id for account in response . accounts ] for response in client . operations_stream . positions_stream ( accounts = accounts ): print ( response ) if __name__ == \"__main__\" : main () \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 examples/retrying_client.py import logging import os from datetime import timedelta from tinkoff.invest import CandleInterval from tinkoff.invest.retrying.settings import RetryClientSettings from tinkoff.invest.retrying.sync.client import RetryingClient from tinkoff.invest.utils import now logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] retry_settings = RetryClientSettings ( use_retry = True , max_retry_attempt = 2 ) with RetryingClient ( TOKEN , settings = retry_settings ) as client : for candle in client . get_all_candles ( figi = \"BBG000B9XRY4\" , from_ = now () - timedelta ( days = 301 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle ) \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0435 examples/sandbox_client.py import os from tinkoff.invest.sandbox.client import SandboxClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with SandboxClient ( TOKEN ) as client : print ( client . users . get_info ()) if __name__ == \"__main__\" : main () \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0438 \u0438\u0445 \u0432\u044b\u0432\u043e\u0434 examples/stream_client.py import os import time from tinkoff.invest import ( CandleInstrument , Client , MarketDataRequest , SubscribeCandlesRequest , SubscriptionAction , SubscriptionInterval , ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): def request_iterator (): yield MarketDataRequest ( subscribe_candles_request = SubscribeCandlesRequest ( waiting_close = True , subscription_action = SubscriptionAction . SUBSCRIPTION_ACTION_SUBSCRIBE , instruments = [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ], ) ) while True : time . sleep ( 1 ) with Client ( TOKEN ) as client : for marketdata in client . market_data_stream . market_data_stream ( request_iterator () ): print ( marketdata ) if __name__ == \"__main__\" : main ()","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"},{"location":"examples/#_1","text":"examples/all_candles.py import os from datetime import timedelta from tinkoff.invest import CandleInterval , Client from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : for candle in client . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 365 ), interval = CandleInterval . CANDLE_INTERVAL_HOUR , ): print ( candle ) return 0 if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434"},{"location":"examples/#_2","text":"examples/async_all_candles.py import asyncio import os from datetime import timedelta from tinkoff.invest import AsyncClient , CandleInterval from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : async for candle in client . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 365 ), interval = CandleInterval . CANDLE_INTERVAL_HOUR , ): print ( candle ) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434"},{"location":"examples/#_3","text":"examples/async_client.py import asyncio import os from tinkoff.invest import AsyncClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : print ( await client . users . get_accounts ()) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"examples/#_4","text":"examples/async_retrying_client.py import asyncio import logging import os from datetime import timedelta from tinkoff.invest import CandleInterval from tinkoff.invest.retrying.aio.client import AsyncRetryingClient from tinkoff.invest.retrying.settings import RetryClientSettings from tinkoff.invest.utils import now logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] retry_settings = RetryClientSettings ( use_retry = True , max_retry_attempt = 2 ) async def main (): async with AsyncRetryingClient ( TOKEN , settings = retry_settings ) as client : async for candle in client . get_all_candles ( figi = \"BBG000B9XRY4\" , from_ = now () - timedelta ( days = 301 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle ) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439"},{"location":"examples/#_5","text":"examples/async_stream_client.py import asyncio import os from tinkoff.invest import ( AsyncClient , CandleInstrument , MarketDataRequest , SubscribeCandlesRequest , SubscriptionAction , SubscriptionInterval , ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async def request_iterator (): yield MarketDataRequest ( subscribe_candles_request = SubscribeCandlesRequest ( subscription_action = SubscriptionAction . SUBSCRIPTION_ACTION_SUBSCRIBE , instruments = [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ], ) ) while True : await asyncio . sleep ( 1 ) async with AsyncClient ( TOKEN ) as client : async for marketdata in client . market_data_stream . market_data_stream ( request_iterator () ): print ( marketdata ) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u043f\u043e \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u043c \u0441\u0432\u0435\u0447\u0430\u043c \u0438 \u0432\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c"},{"location":"examples/#_6","text":"examples/cancel_orders.py import logging import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] logger = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO ) def main (): with Client ( TOKEN ) as client : response = client . users . get_accounts () account , * _ = response . accounts account_id = account . id logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) client . cancel_all_orders ( account_id = account . id ) logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) if __name__ == \"__main__\" : main ()","title":"\u041e\u0442\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u0439"},{"location":"examples/#_7","text":"examples/client.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : print ( client . users . get_accounts ()) if __name__ == \"__main__\" : main ()","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"examples/#_8","text":"examples/download_all_candles.py import logging import os from datetime import timedelta from pathlib import Path from tinkoff.invest import CandleInterval , Client from tinkoff.invest.caching.market_data_cache.cache_settings import ( MarketDataCacheSettings , ) from tinkoff.invest.services import MarketDataCache from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) def main (): with Client ( TOKEN ) as client : settings = MarketDataCacheSettings ( base_cache_dir = Path ( \"market_data_cache\" )) market_data_cache = MarketDataCache ( settings = settings , services = client ) for candle in market_data_cache . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 3 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle . time ) return 0 if __name__ == \"__main__\" : main ()","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u043f\u043e \u0438\u043d\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0443"},{"location":"examples/#_9","text":"examples/easy_async_stream_client.py import asyncio import os from tinkoff.invest import ( AsyncClient , CandleInstrument , InfoInstrument , SubscriptionInterval , ) from tinkoff.invest.async_services import AsyncMarketDataStreamManager TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : market_data_stream : AsyncMarketDataStreamManager = ( client . create_market_data_stream () ) market_data_stream . candles . subscribe ( [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ] ) async for marketdata in market_data_stream : print ( marketdata ) market_data_stream . info . subscribe ([ InfoInstrument ( figi = \"BBG004730N88\" )]) if marketdata . subscribe_info_response : market_data_stream . stop () if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439"},{"location":"examples/#_10","text":"examples/easy_stream_client.py import os from tinkoff.invest import ( CandleInstrument , Client , InfoInstrument , SubscriptionInterval , ) from tinkoff.invest.services import MarketDataStreamManager TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : market_data_stream : MarketDataStreamManager = client . create_market_data_stream () market_data_stream . candles . subscribe ( [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ] ) for marketdata in market_data_stream : print ( marketdata ) market_data_stream . info . subscribe ([ InfoInstrument ( figi = \"BBG004730N88\" )]) if marketdata . subscribe_info_response : market_data_stream . stop () if __name__ == \"__main__\" : main ()","title":"\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439"},{"location":"examples/#_11","text":"examples/get_operations_by_cursor.py import os from tinkoff.invest import Client , GetOperationsByCursorRequest token = os . environ [ \"INVEST_TOKEN\" ] with Client ( token ) as client : accounts = client . users . get_accounts () account_id = accounts . accounts [ 0 ] . id def get_request ( cursor = \"\" ): return GetOperationsByCursorRequest ( account_id = account_id , instrument_id = \"BBG004730N88\" , cursor = cursor , limit = 1 , ) operations = client . operations . get_operations_by_cursor ( get_request ()) print ( operations ) while operations . has_next : request = get_request ( cursor = operations . next_cursor ) operations = client . operations . get_operations_by_cursor ( request ) print ( operations )","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u0438\u0445 \u043f\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434"},{"location":"examples/#_12","text":"examples/instrument_cache.py import logging import os from pprint import pprint from tinkoff.invest import Client , InstrumentIdType from tinkoff.invest.caching.instruments_cache.instruments_cache import InstrumentsCache from tinkoff.invest.caching.instruments_cache.settings import InstrumentsCacheSettings TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( level = logging . INFO ) def main (): with Client ( TOKEN ) as client : inst = client . instruments . etfs () . instruments [ - 1 ] pprint ( inst ) from_server = client . instruments . etf_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_UID , class_code = inst . class_code , id = inst . uid , ) pprint ( from_server ) settings = InstrumentsCacheSettings () instruments_cache = InstrumentsCache ( settings = settings , instruments_service = client . instruments ) from_cache = instruments_cache . etf_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_UID , class_code = inst . class_code , id = inst . uid , ) pprint ( from_cache ) if str ( from_server ) != str ( from_cache ): raise Exception ( \"cache miss\" ) if __name__ == \"__main__\" : main ()","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432"},{"location":"examples/#query","text":"examples/instruments.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : r = client . instruments . find_instrument ( query = \"\u0442\u0438\u043d\u044c\u043a\u043e\u0444\u0444\" ) for i in r . instruments : print ( i ) if __name__ == \"__main__\" : main ()","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 query"},{"location":"examples/#_13","text":"examples/logger.py import logging import os from tinkoff.invest import Client , RequestError TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . INFO ) logger = logging . getLogger ( __name__ ) def main (): with Client ( TOKEN ) as client : _ = client . users . get_accounts () . accounts try : client . users . get_margin_attributes ( account_id = \"123\" ) except RequestError as err : tracking_id = err . metadata . tracking_id if err . metadata else \"\" logger . error ( \"Error tracking_id= %s code= %s \" , tracking_id , str ( err . code )) if __name__ == \"__main__\" : main ()","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043b\u043e\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a"},{"location":"examples/#_14","text":"examples/porfolio_stream_client.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : accounts = client . users . get_accounts () for portfolio in client . operations_stream . portfolio_stream ( accounts = [ acc . id for acc in accounts . accounts ] ): print ( portfolio ) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0440\u0442\u0444\u043e\u043b\u0438\u043e \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438"},{"location":"examples/#_15","text":"examples/positions_stream.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : response = client . users . get_accounts () accounts = [ account . id for account in response . accounts ] for response in client . operations_stream . positions_stream ( accounts = accounts ): print ( response ) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438"},{"location":"examples/#_16","text":"examples/retrying_client.py import logging import os from datetime import timedelta from tinkoff.invest import CandleInterval from tinkoff.invest.retrying.settings import RetryClientSettings from tinkoff.invest.retrying.sync.client import RetryingClient from tinkoff.invest.utils import now logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] retry_settings = RetryClientSettings ( use_retry = True , max_retry_attempt = 2 ) with RetryingClient ( TOKEN , settings = retry_settings ) as client : for candle in client . get_all_candles ( figi = \"BBG000B9XRY4\" , from_ = now () - timedelta ( days = 301 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle )","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439"},{"location":"examples/#_17","text":"examples/sandbox_client.py import os from tinkoff.invest.sandbox.client import SandboxClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with SandboxClient ( TOKEN ) as client : print ( client . users . get_info ()) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0435"},{"location":"examples/#_18","text":"examples/stream_client.py import os import time from tinkoff.invest import ( CandleInstrument , Client , MarketDataRequest , SubscribeCandlesRequest , SubscriptionAction , SubscriptionInterval , ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): def request_iterator (): yield MarketDataRequest ( subscribe_candles_request = SubscribeCandlesRequest ( waiting_close = True , subscription_action = SubscriptionAction . SUBSCRIPTION_ACTION_SUBSCRIBE , instruments = [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ], ) ) while True : time . sleep ( 1 ) with Client ( TOKEN ) as client : for marketdata in client . market_data_stream . market_data_stream ( request_iterator () ): print ( marketdata ) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0438 \u0438\u0445 \u0432\u044b\u0432\u043e\u0434"},{"location":"robots/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u043e\u0432 \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 tromario/tinkoff-invest-volume-analysis-robot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043e\u0434\u0438\u043d \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u043c \u0440\u044b\u043d\u043a\u0430 - \u0440\u0435\u0430\u043a\u0446\u0438\u044f \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043c \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u043d\u044f \u0437\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043e\u0431\u044a\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0437\u0430\u043b\u043e\u0436\u0435\u043d \u0432 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043f\u043f\u0430\u0440\u0430\u0442. \u0420\u0430\u0431\u043e\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430. qwertyo1/tinkoff-trading-bot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f. \u041d\u0435\u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0431\u044b\u0441\u0442\u0440\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f, \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u043e\u0440\u0433\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u043f\u043e\u0434 \u0441\u0432\u043e\u0438 \u0446\u0435\u043b\u0438. \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 sqllite. karpp/investRobot investRobot - \u044d\u0442\u043e \u0440\u043e\u0431\u043e\u0442 \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439 \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c Tinkoff Invest API. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043e\u0434\u043d\u0430 \u0442\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u0435 \u0434\u0432\u0443\u0445 \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0438\u0445 \u0441\u0440\u0435\u0434\u043d\u0438\u0445. EIDiamond/invest-bot \u0420\u043e\u0431\u043e\u0442 \u0438\u043d\u0442\u0440\u0430\u0434\u0435\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u0431\u0438\u0440\u0436\u0435 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e \u0441\u0434\u0435\u043b\u043a\u0430\u0445 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u0432 Telegram \u0447\u0430\u0442.\u0423\u0434\u043e\u0431\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\\\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c. \u0411\u0435\u0437 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442\u0430 \u0432\u0441\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0438\u0448\u0443\u0442\u0441\u044f \u0432 \u043b\u043e\u0433 \u0444\u0430\u0439\u043b. \u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438 (\"ma200_support_action\"), \u043a\u0443\u0434\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0438\u0433\u043d\u0430\u043b\u044b \u043d\u0430 \u0448\u043e\u0440\u0442 \u0438\u043b\u0438 \u043b\u043e\u043d\u0433 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c. \u0417\u0430\u0442\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u043a\u0446\u0438\u0439, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0438\u0448\u043b\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u0442\u044b \u0441\u0438\u0433\u043d\u0430\u043b\u0430. import logging import os from datetime import timedelta from decimal import Decimal from matplotlib import pyplot as plt from tinkoff.invest import CandleInterval , Client from tinkoff.invest.strategies.base.account_manager import AccountManager from tinkoff.invest.strategies.moving_average.plotter import ( MovingAverageStrategyPlotter , ) from tinkoff.invest.strategies.moving_average.signal_executor import ( MovingAverageSignalExecutor , ) from tinkoff.invest.strategies.moving_average.strategy import MovingAverageStrategy from tinkoff.invest.strategies.moving_average.strategy_settings import ( MovingAverageStrategySettings , ) from tinkoff.invest.strategies.moving_average.strategy_state import ( MovingAverageStrategyState , ) from tinkoff.invest.strategies.moving_average.supervisor import ( MovingAverageStrategySupervisor , ) from tinkoff.invest.strategies.moving_average.trader import MovingAverageStrategyTrader logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . INFO ) logger = logging . getLogger ( __name__ ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] FIGI = os . environ [ \"INVEST_FIGI\" ] ACCOUNT_ID = os . environ [ \"INVEST_ACCOUNT_ID\" ] def main (): with Client ( TOKEN ) as services : settings = MovingAverageStrategySettings ( share_id = FIGI , account_id = ACCOUNT_ID , max_transaction_price = Decimal ( 10000 ), candle_interval = CandleInterval . CANDLE_INTERVAL_1_MIN , long_period = timedelta ( minutes = 100 ), short_period = timedelta ( minutes = 20 ), std_period = timedelta ( minutes = 30 ), ) account_manager = AccountManager ( services = services , strategy_settings = settings ) state = MovingAverageStrategyState () strategy = MovingAverageStrategy ( settings = settings , account_manager = account_manager , state = state , ) signal_executor = MovingAverageSignalExecutor ( services = services , state = state , settings = settings , ) supervisor = MovingAverageStrategySupervisor () trader = MovingAverageStrategyTrader ( strategy = strategy , settings = settings , services = services , state = state , signal_executor = signal_executor , account_manager = account_manager , supervisor = supervisor , ) plotter = MovingAverageStrategyPlotter ( settings = settings ) initial_balance = account_manager . get_current_balance () for i in range ( 5 ): logger . info ( \"Trade %s \" , i ) trader . trade () current_balance = account_manager . get_current_balance () logger . info ( \"Initial balance %s \" , initial_balance ) logger . info ( \"Current balance %s \" , current_balance ) events = supervisor . get_events () plotter . plot ( events ) plt . show ()","title":"\u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"robots/#_1","text":"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 tromario/tinkoff-invest-volume-analysis-robot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043e\u0434\u0438\u043d \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u043c \u0440\u044b\u043d\u043a\u0430 - \u0440\u0435\u0430\u043a\u0446\u0438\u044f \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043c \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u043d\u044f \u0437\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043e\u0431\u044a\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0437\u0430\u043b\u043e\u0436\u0435\u043d \u0432 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043f\u043f\u0430\u0440\u0430\u0442. \u0420\u0430\u0431\u043e\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430. qwertyo1/tinkoff-trading-bot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f. \u041d\u0435\u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0431\u044b\u0441\u0442\u0440\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f, \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u043e\u0440\u0433\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u043f\u043e\u0434 \u0441\u0432\u043e\u0438 \u0446\u0435\u043b\u0438. \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 sqllite. karpp/investRobot investRobot - \u044d\u0442\u043e \u0440\u043e\u0431\u043e\u0442 \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439 \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c Tinkoff Invest API. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043e\u0434\u043d\u0430 \u0442\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u0435 \u0434\u0432\u0443\u0445 \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0438\u0445 \u0441\u0440\u0435\u0434\u043d\u0438\u0445. EIDiamond/invest-bot \u0420\u043e\u0431\u043e\u0442 \u0438\u043d\u0442\u0440\u0430\u0434\u0435\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u0431\u0438\u0440\u0436\u0435 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e \u0441\u0434\u0435\u043b\u043a\u0430\u0445 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u0432 Telegram \u0447\u0430\u0442.\u0423\u0434\u043e\u0431\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\\\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c. \u0411\u0435\u0437 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442\u0430 \u0432\u0441\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0438\u0448\u0443\u0442\u0441\u044f \u0432 \u043b\u043e\u0433 \u0444\u0430\u0439\u043b.","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u043e\u0432"},{"location":"robots/#_2","text":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438 (\"ma200_support_action\"), \u043a\u0443\u0434\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0438\u0433\u043d\u0430\u043b\u044b \u043d\u0430 \u0448\u043e\u0440\u0442 \u0438\u043b\u0438 \u043b\u043e\u043d\u0433 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c. \u0417\u0430\u0442\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u043a\u0446\u0438\u0439, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0438\u0448\u043b\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u0442\u044b \u0441\u0438\u0433\u043d\u0430\u043b\u0430. import logging import os from datetime import timedelta from decimal import Decimal from matplotlib import pyplot as plt from tinkoff.invest import CandleInterval , Client from tinkoff.invest.strategies.base.account_manager import AccountManager from tinkoff.invest.strategies.moving_average.plotter import ( MovingAverageStrategyPlotter , ) from tinkoff.invest.strategies.moving_average.signal_executor import ( MovingAverageSignalExecutor , ) from tinkoff.invest.strategies.moving_average.strategy import MovingAverageStrategy from tinkoff.invest.strategies.moving_average.strategy_settings import ( MovingAverageStrategySettings , ) from tinkoff.invest.strategies.moving_average.strategy_state import ( MovingAverageStrategyState , ) from tinkoff.invest.strategies.moving_average.supervisor import ( MovingAverageStrategySupervisor , ) from tinkoff.invest.strategies.moving_average.trader import MovingAverageStrategyTrader logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . INFO ) logger = logging . getLogger ( __name__ ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] FIGI = os . environ [ \"INVEST_FIGI\" ] ACCOUNT_ID = os . environ [ \"INVEST_ACCOUNT_ID\" ] def main (): with Client ( TOKEN ) as services : settings = MovingAverageStrategySettings ( share_id = FIGI , account_id = ACCOUNT_ID , max_transaction_price = Decimal ( 10000 ), candle_interval = CandleInterval . CANDLE_INTERVAL_1_MIN , long_period = timedelta ( minutes = 100 ), short_period = timedelta ( minutes = 20 ), std_period = timedelta ( minutes = 30 ), ) account_manager = AccountManager ( services = services , strategy_settings = settings ) state = MovingAverageStrategyState () strategy = MovingAverageStrategy ( settings = settings , account_manager = account_manager , state = state , ) signal_executor = MovingAverageSignalExecutor ( services = services , state = state , settings = settings , ) supervisor = MovingAverageStrategySupervisor () trader = MovingAverageStrategyTrader ( strategy = strategy , settings = settings , services = services , state = state , signal_executor = signal_executor , account_manager = account_manager , supervisor = supervisor , ) plotter = MovingAverageStrategyPlotter ( settings = settings ) initial_balance = account_manager . get_current_balance () for i in range ( 5 ): logger . info ( \"Trade %s \" , i ) trader . trade () current_balance = account_manager . get_current_balance () logger . info ( \"Initial balance %s \" , initial_balance ) logger . info ( \"Current balance %s \" , current_balance ) events = supervisor . get_events () plotter . plot ( events ) plt . show ()","title":"\u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438"},{"location":"api/clients/","text":"Clients AsyncClient Async client. import asyncio import os from tinkoff.invest import AsyncClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : print ( await client . users . get_accounts ()) if __name__ == \"__main__\" : asyncio . run ( main ()) Client Sync client. import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : print ( client . users . get_accounts ())","title":"Clients"},{"location":"api/clients/#clients","text":"","title":"Clients"},{"location":"api/clients/#tinkoff.invest.clients.AsyncClient","text":"Async client. import asyncio import os from tinkoff.invest import AsyncClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : print ( await client . users . get_accounts ()) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"AsyncClient"},{"location":"api/clients/#tinkoff.invest.clients.Client","text":"Sync client. import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : print ( client . users . get_accounts ())","title":"Client"}]}