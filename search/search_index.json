{"config":{"indexing":"full","lang":["ru"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tinkoff Invest \u0414\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0442\u043e\u0440\u0433\u043e\u0432\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e\u0439 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b pip install tinkoff-investments \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u2611 \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 GRPC \u043a\u043b\u0438\u0435\u043d\u0442 \u2611 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u044f\u0432\u043a\u0438 \u2611 \u0412\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \"\u043e\u0442\" \u0438 \"\u0434\u043e\" \u2611 \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u2611 \u0422\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u041a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 from tinkoff.invest import Client TOKEN = 'token' with Client ( TOKEN ) as client : print ( client . users . get_accounts ()) \u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c target \u0412 Tinkoff Invest API \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u043a\u043e\u043d\u0442\u0443\u0440\u0430 - \"\u0431\u043e\u0435\u0432\u043e\u0439\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0440\u0434\u0435\u0440\u043e\u0432 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0438 \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f API \u0438 \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0433\u0438\u043f\u043e\u0442\u0435\u0437, \u0437\u0430\u044f\u0432\u043a\u0438 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430 \u0431\u0438\u0440\u0436\u0443, \u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0435. \u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043d\u0442\u0443\u0440\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0447\u0435\u0440\u0435\u0437 target, INVEST_GRPC_API - \"\u0431\u043e\u0435\u0432\u043e\u0439\", INVEST_GRPC_API_SANDBOX - \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\" from tinkoff.invest import Client from tinkoff.invest.constants import INVEST_GRPC_API TOKEN = 'token' with Client ( TOKEN , target = INVEST_GRPC_API ) as client : print ( client . users . get_accounts ()) :warning: \u041d\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0432 \u043e\u0431\u0449\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 examples . Contribution \u0414\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0445\u043e\u0447\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442. CONTRIBUTING License \u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f The Apache License .","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#tinkoff-invest","text":"\u0414\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0442\u043e\u0440\u0433\u043e\u0432\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e\u0439 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0438 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432","title":"Tinkoff Invest"},{"location":"#_1","text":"pip install tinkoff-investments","title":"\u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#_2","text":"\u2611 \u0421\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 GRPC \u043a\u043b\u0438\u0435\u043d\u0442 \u2611 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u044f\u0432\u043a\u0438 \u2611 \u0412\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \"\u043e\u0442\" \u0438 \"\u0434\u043e\" \u2611 \u041a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u2611 \u0422\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f","title":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438"},{"location":"#_3","text":"","title":"\u041a\u0430\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f"},{"location":"#_4","text":"from tinkoff.invest import Client TOKEN = 'token' with Client ( TOKEN ) as client : print ( client . users . get_accounts ())","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432"},{"location":"#target","text":"\u0412 Tinkoff Invest API \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u043a\u043e\u043d\u0442\u0443\u0440\u0430 - \"\u0431\u043e\u0435\u0432\u043e\u0439\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0440\u0434\u0435\u0440\u043e\u0432 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0438 \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\", \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f API \u0438 \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0433\u0438\u043f\u043e\u0442\u0435\u0437, \u0437\u0430\u044f\u0432\u043a\u0438 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430 \u0431\u0438\u0440\u0436\u0443, \u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u044d\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u0435. \u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043d\u0442\u0443\u0440\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0447\u0435\u0440\u0435\u0437 target, INVEST_GRPC_API - \"\u0431\u043e\u0435\u0432\u043e\u0439\", INVEST_GRPC_API_SANDBOX - \"\u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430\" from tinkoff.invest import Client from tinkoff.invest.constants import INVEST_GRPC_API TOKEN = 'token' with Client ( TOKEN , target = INVEST_GRPC_API ) as client : print ( client . users . get_accounts ()) :warning: \u041d\u0435 \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0432 \u043e\u0431\u0449\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 examples .","title":"\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c target"},{"location":"#contribution","text":"\u0414\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0445\u043e\u0447\u0435\u0442 \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442. CONTRIBUTING","title":"Contribution"},{"location":"#license","text":"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f The Apache License .","title":"License"},{"location":"CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.2.0-beta40 - 2022-10-25 Compare with 0.2.0-beta39 Bug Fixes Test ( 36edfb7 by Ruslan Sirazhetdinov). Features Update grpc, support api v1.0.15 ( beec6b9 by Danil Akhtarov). 0.2.0-beta39 - 2022-10-10 Compare with 0.2.0-beta38 Features New contract support (#126) ( 880c529 by Ruslan Sirazhetdinov). Add sandbox github actions (#125) ( 311d436 by Ruslan Sirazhetdinov). Deduplicate candles (#118) ( 21e7d44 by Ruslan Sirazhetdinov). Arithmetics for quotation (#119) ( 40932c3 by Ruslan Sirazhetdinov). 0.2.0-beta38 - 2022-09-29 Compare with 0.2.0-beta37 Bug Fixes Fix replacesandboxorder ( 43fe25f by Danil Akhtarov). 0.2.0-beta37 - 2022-09-29 Compare with 0.2.0-beta36 Bug Fixes Fix repeated fields in positiondata (#121) ( d9c9b20 by Ruslan Sirazhetdinov). Features Update dependencies ( 2c6860e by Danil Akhtarov). 0.2.0-beta36 - 2022-09-10 Compare with 0.2.0-beta35 Bug Fixes Positions_stream model, add example (#115) ( 2d5d6b2 by Ruslan Sirazhetdinov). Features Sleep if exhausted (#106) ( d057bcb by Ruslan Sirazhetdinov). 0.2.0-beta35 - 2022-08-30 Compare with 0.2.0-beta34 Bug Fixes Format code in issue template (#108) ( 4a2c1c7 by Ruslan Sirazhetdinov). Features Support v1.0.12 ( ba0729e by Danil Akhtarov). 0.2.0-beta34 - 2022-08-27 Compare with 0.2.0-beta33 Bug Fixes Fix get operations by cursor (#109) ( 6c4385d by Ruslan Sirazhetdinov). Code Refactoring Add cachetools ( 35b194c by Danil Akhtarov). Features Sandbox client (#110) ( aa5ff74 by Ruslan Sirazhetdinov). Feature instrument caching (#92) ( b180f35 by Ruslan Sirazhetdinov). 0.2.0-beta33 - 2022-08-04 Compare with 0.2.0-beta32 Bug Fixes Fix is complete caching (#84) ( 13b7025 by Ruslan Sirazhetdinov). Features Support grpc v1.0.11 ( 80f7f5f by Danil Akhtarov). 0.2.0-beta32 - 2022-07-07 Compare with 0.2.0-beta31 Bug Fixes Rm excess await (#88) ( a412965 by Ruslan Sirazhetdinov). 0.2.0-beta31 - 2022-07-04 Compare with 0.2.0-beta30 Features Add operationsstreamservice ( 4dda0a4 by Danil Akhtarov). 0.2.0-beta30 - 2022-06-07 Compare with 0.2.0-beta29 Bug Fixes Skip placeholder ( 7087057 by Danil Akhtarov). Features Support v1.0.8 methods ( 405884f by Danil Akhtarov). 0.2.0-beta29 - 2022-06-01 Compare with 0.2.0-beta28 Features Support v1.0.8 schemas ( 08eac8e by Danil Akhtarov). 0.2.0-beta28 - 2022-05-23 Compare with 0.2.0-beta27 Bug Fixes Fix min() arg is an empty sequence error on get_all_candles (#71) ( 872e563 by Anton Semenov). Features Add target arg ( 86e9a48 by Danil Akhtarov). 0.2.0-beta27 - 2022-05-11 Compare with 0.2.0-beta26 Bug Fixes Add dateutil (#66) ( 552ef32 by Ruslan Sirazhetdinov). Add gitlint to pyproject.toml ( 1a6a922 by Danil Akhtarov). 0.2.0-beta26 - 2022-05-06 Compare with 0.2.0-beta25 0.2.0-beta25 - 2022-05-03 Compare with 0.2.0-beta24 0.2.0-beta24 - 2022-05-01 Compare with 0.2.0-beta23 0.2.0-beta23 - 2022-04-25 Compare with 0.2.0-beta22 0.2.0-beta22 - 2022-04-24 Compare with 0.2.0-beta21 0.2.0-beta21 - 2022-04-23 Compare with 0.2.0-beta20 0.2.0-beta20 - 2022-04-07 Compare with 0.2.0-beta19 0.2.0-beta19 - 2022-03-22 Compare with 0.2.0-beta18 0.2.0-beta18 - 2022-03-16 Compare with 0.2.0-beta17 0.2.0-beta17 - 2022-03-13 Compare with 0.2.0-beta16 0.2.0-beta16 - 2022-03-04 Compare with 0.2.0-beta15 0.2.0-beta15 - 2022-02-18 Compare with 0.2.0-beta14 0.2.0-beta14 - 2022-02-03 Compare with 0.2.0-beta13 0.2.0-beta13 - 2022-02-01 Compare with 0.2.0-beta12 0.2.0-beta12 - 2022-01-31 Compare with 0.2.0-beta11 0.2.0-beta11 - 2022-01-31 Compare with 0.2.0-beta10 0.2.0-beta10 - 2022-01-31 Compare with 0.2.0-beta9 0.2.0-beta9 - 2022-01-31 Compare with 0.2.0-beta8 0.2.0-beta8 - 2022-01-28 Compare with 0.2.0-beta7 0.2.0-beta7 - 2022-01-28 Compare with 0.2.0-beta6 0.2.0-beta6 - 2022-01-25 Compare with 0.2.0-beta5 0.2.0-beta5 - 2022-01-23 Compare with 0.2.0-beta4 0.2.0-beta4 - 2022-01-20 Compare with 0.2.0-beta3 0.2.0-beta3 - 2022-01-19 Compare with 0.2.0-beta1 0.2.0-beta1 - 2022-01-18 Compare with 0.2.0-beta0 0.2.0-beta0 - 2022-01-18 Compare with first commit","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"CHANGELOG/#020-beta40-2022-10-25","text":"Compare with 0.2.0-beta39","title":"0.2.0-beta40 - 2022-10-25"},{"location":"CHANGELOG/#bug-fixes","text":"Test ( 36edfb7 by Ruslan Sirazhetdinov).","title":"Bug Fixes"},{"location":"CHANGELOG/#features","text":"Update grpc, support api v1.0.15 ( beec6b9 by Danil Akhtarov).","title":"Features"},{"location":"CHANGELOG/#020-beta39-2022-10-10","text":"Compare with 0.2.0-beta38","title":"0.2.0-beta39 - 2022-10-10"},{"location":"CHANGELOG/#features_1","text":"New contract support (#126) ( 880c529 by Ruslan Sirazhetdinov). Add sandbox github actions (#125) ( 311d436 by Ruslan Sirazhetdinov). Deduplicate candles (#118) ( 21e7d44 by Ruslan Sirazhetdinov). Arithmetics for quotation (#119) ( 40932c3 by Ruslan Sirazhetdinov).","title":"Features"},{"location":"CHANGELOG/#020-beta38-2022-09-29","text":"Compare with 0.2.0-beta37","title":"0.2.0-beta38 - 2022-09-29"},{"location":"CHANGELOG/#bug-fixes_1","text":"Fix replacesandboxorder ( 43fe25f by Danil Akhtarov).","title":"Bug Fixes"},{"location":"CHANGELOG/#020-beta37-2022-09-29","text":"Compare with 0.2.0-beta36","title":"0.2.0-beta37 - 2022-09-29"},{"location":"CHANGELOG/#bug-fixes_2","text":"Fix repeated fields in positiondata (#121) ( d9c9b20 by Ruslan Sirazhetdinov).","title":"Bug Fixes"},{"location":"CHANGELOG/#features_2","text":"Update dependencies ( 2c6860e by Danil Akhtarov).","title":"Features"},{"location":"CHANGELOG/#020-beta36-2022-09-10","text":"Compare with 0.2.0-beta35","title":"0.2.0-beta36 - 2022-09-10"},{"location":"CHANGELOG/#bug-fixes_3","text":"Positions_stream model, add example (#115) ( 2d5d6b2 by Ruslan Sirazhetdinov).","title":"Bug Fixes"},{"location":"CHANGELOG/#features_3","text":"Sleep if exhausted (#106) ( d057bcb by Ruslan Sirazhetdinov).","title":"Features"},{"location":"CHANGELOG/#020-beta35-2022-08-30","text":"Compare with 0.2.0-beta34","title":"0.2.0-beta35 - 2022-08-30"},{"location":"CHANGELOG/#bug-fixes_4","text":"Format code in issue template (#108) ( 4a2c1c7 by Ruslan Sirazhetdinov).","title":"Bug Fixes"},{"location":"CHANGELOG/#features_4","text":"Support v1.0.12 ( ba0729e by Danil Akhtarov).","title":"Features"},{"location":"CHANGELOG/#020-beta34-2022-08-27","text":"Compare with 0.2.0-beta33","title":"0.2.0-beta34 - 2022-08-27"},{"location":"CHANGELOG/#bug-fixes_5","text":"Fix get operations by cursor (#109) ( 6c4385d by Ruslan Sirazhetdinov).","title":"Bug Fixes"},{"location":"CHANGELOG/#code-refactoring","text":"Add cachetools ( 35b194c by Danil Akhtarov).","title":"Code Refactoring"},{"location":"CHANGELOG/#features_5","text":"Sandbox client (#110) ( aa5ff74 by Ruslan Sirazhetdinov). Feature instrument caching (#92) ( b180f35 by Ruslan Sirazhetdinov).","title":"Features"},{"location":"CHANGELOG/#020-beta33-2022-08-04","text":"Compare with 0.2.0-beta32","title":"0.2.0-beta33 - 2022-08-04"},{"location":"CHANGELOG/#bug-fixes_6","text":"Fix is complete caching (#84) ( 13b7025 by Ruslan Sirazhetdinov).","title":"Bug Fixes"},{"location":"CHANGELOG/#features_6","text":"Support grpc v1.0.11 ( 80f7f5f by Danil Akhtarov).","title":"Features"},{"location":"CHANGELOG/#020-beta32-2022-07-07","text":"Compare with 0.2.0-beta31","title":"0.2.0-beta32 - 2022-07-07"},{"location":"CHANGELOG/#bug-fixes_7","text":"Rm excess await (#88) ( a412965 by Ruslan Sirazhetdinov).","title":"Bug Fixes"},{"location":"CHANGELOG/#020-beta31-2022-07-04","text":"Compare with 0.2.0-beta30","title":"0.2.0-beta31 - 2022-07-04"},{"location":"CHANGELOG/#features_7","text":"Add operationsstreamservice ( 4dda0a4 by Danil Akhtarov).","title":"Features"},{"location":"CHANGELOG/#020-beta30-2022-06-07","text":"Compare with 0.2.0-beta29","title":"0.2.0-beta30 - 2022-06-07"},{"location":"CHANGELOG/#bug-fixes_8","text":"Skip placeholder ( 7087057 by Danil Akhtarov).","title":"Bug Fixes"},{"location":"CHANGELOG/#features_8","text":"Support v1.0.8 methods ( 405884f by Danil Akhtarov).","title":"Features"},{"location":"CHANGELOG/#020-beta29-2022-06-01","text":"Compare with 0.2.0-beta28","title":"0.2.0-beta29 - 2022-06-01"},{"location":"CHANGELOG/#features_9","text":"Support v1.0.8 schemas ( 08eac8e by Danil Akhtarov).","title":"Features"},{"location":"CHANGELOG/#020-beta28-2022-05-23","text":"Compare with 0.2.0-beta27","title":"0.2.0-beta28 - 2022-05-23"},{"location":"CHANGELOG/#bug-fixes_9","text":"Fix min() arg is an empty sequence error on get_all_candles (#71) ( 872e563 by Anton Semenov).","title":"Bug Fixes"},{"location":"CHANGELOG/#features_10","text":"Add target arg ( 86e9a48 by Danil Akhtarov).","title":"Features"},{"location":"CHANGELOG/#020-beta27-2022-05-11","text":"Compare with 0.2.0-beta26","title":"0.2.0-beta27 - 2022-05-11"},{"location":"CHANGELOG/#bug-fixes_10","text":"Add dateutil (#66) ( 552ef32 by Ruslan Sirazhetdinov). Add gitlint to pyproject.toml ( 1a6a922 by Danil Akhtarov).","title":"Bug Fixes"},{"location":"CHANGELOG/#020-beta26-2022-05-06","text":"Compare with 0.2.0-beta25","title":"0.2.0-beta26 - 2022-05-06"},{"location":"CHANGELOG/#020-beta25-2022-05-03","text":"Compare with 0.2.0-beta24","title":"0.2.0-beta25 - 2022-05-03"},{"location":"CHANGELOG/#020-beta24-2022-05-01","text":"Compare with 0.2.0-beta23","title":"0.2.0-beta24 - 2022-05-01"},{"location":"CHANGELOG/#020-beta23-2022-04-25","text":"Compare with 0.2.0-beta22","title":"0.2.0-beta23 - 2022-04-25"},{"location":"CHANGELOG/#020-beta22-2022-04-24","text":"Compare with 0.2.0-beta21","title":"0.2.0-beta22 - 2022-04-24"},{"location":"CHANGELOG/#020-beta21-2022-04-23","text":"Compare with 0.2.0-beta20","title":"0.2.0-beta21 - 2022-04-23"},{"location":"CHANGELOG/#020-beta20-2022-04-07","text":"Compare with 0.2.0-beta19","title":"0.2.0-beta20 - 2022-04-07"},{"location":"CHANGELOG/#020-beta19-2022-03-22","text":"Compare with 0.2.0-beta18","title":"0.2.0-beta19 - 2022-03-22"},{"location":"CHANGELOG/#020-beta18-2022-03-16","text":"Compare with 0.2.0-beta17","title":"0.2.0-beta18 - 2022-03-16"},{"location":"CHANGELOG/#020-beta17-2022-03-13","text":"Compare with 0.2.0-beta16","title":"0.2.0-beta17 - 2022-03-13"},{"location":"CHANGELOG/#020-beta16-2022-03-04","text":"Compare with 0.2.0-beta15","title":"0.2.0-beta16 - 2022-03-04"},{"location":"CHANGELOG/#020-beta15-2022-02-18","text":"Compare with 0.2.0-beta14","title":"0.2.0-beta15 - 2022-02-18"},{"location":"CHANGELOG/#020-beta14-2022-02-03","text":"Compare with 0.2.0-beta13","title":"0.2.0-beta14 - 2022-02-03"},{"location":"CHANGELOG/#020-beta13-2022-02-01","text":"Compare with 0.2.0-beta12","title":"0.2.0-beta13 - 2022-02-01"},{"location":"CHANGELOG/#020-beta12-2022-01-31","text":"Compare with 0.2.0-beta11","title":"0.2.0-beta12 - 2022-01-31"},{"location":"CHANGELOG/#020-beta11-2022-01-31","text":"Compare with 0.2.0-beta10","title":"0.2.0-beta11 - 2022-01-31"},{"location":"CHANGELOG/#020-beta10-2022-01-31","text":"Compare with 0.2.0-beta9","title":"0.2.0-beta10 - 2022-01-31"},{"location":"CHANGELOG/#020-beta9-2022-01-31","text":"Compare with 0.2.0-beta8","title":"0.2.0-beta9 - 2022-01-31"},{"location":"CHANGELOG/#020-beta8-2022-01-28","text":"Compare with 0.2.0-beta7","title":"0.2.0-beta8 - 2022-01-28"},{"location":"CHANGELOG/#020-beta7-2022-01-28","text":"Compare with 0.2.0-beta6","title":"0.2.0-beta7 - 2022-01-28"},{"location":"CHANGELOG/#020-beta6-2022-01-25","text":"Compare with 0.2.0-beta5","title":"0.2.0-beta6 - 2022-01-25"},{"location":"CHANGELOG/#020-beta5-2022-01-23","text":"Compare with 0.2.0-beta4","title":"0.2.0-beta5 - 2022-01-23"},{"location":"CHANGELOG/#020-beta4-2022-01-20","text":"Compare with 0.2.0-beta3","title":"0.2.0-beta4 - 2022-01-20"},{"location":"CHANGELOG/#020-beta3-2022-01-19","text":"Compare with 0.2.0-beta1","title":"0.2.0-beta3 - 2022-01-19"},{"location":"CHANGELOG/#020-beta1-2022-01-18","text":"Compare with 0.2.0-beta0","title":"0.2.0-beta1 - 2022-01-18"},{"location":"CHANGELOG/#020-beta0-2022-01-18","text":"Compare with first commit","title":"0.2.0-beta0 - 2022-01-18"},{"location":"CONTRIBUTING/","text":"Contributing \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 Tinkoff Invest! \u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442 \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 fork \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0421\u043a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 \u0441\u0432\u043e\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 git clone https://github.com/Tinkoff/invest-python.git \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0434\u043b\u044f \u0432\u0430\u0448\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 git checkout -b branch_name \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435 (\u0441\u043c. \u043d\u0438\u0436\u0435) \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u043e\u0434 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441\u0432\u043e\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 (\u043c\u044b \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u0441\u044f \u044d\u0442\u0438\u0445 \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0439) git add . git commit -m \"feat: add new feature\" \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 github git push \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 Pull Request \u0432 \u044d\u0442\u043e\u0442 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435 \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c poetry . \u0422\u0430\u043a\u0436\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u0441\u043a \u0440\u0430\u043d\u043d\u0435\u0440 make. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 pip install poetry make install \u0417\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u043e\u0432 make test \u0417\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 make lint make git-lint Using gitlint as a commit-msg hook gitlint install-hook # To remove the hook gitlint uninstall-hook \u0417\u0430\u043f\u0443\u0441\u043a \u0430\u0432\u0442\u043e\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f make format \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432 make download-protos \u041f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0432\u0435\u0442\u043a\u0438 main . \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 make gen-grpc \u0417\u0430\u0442\u0435\u043c, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0443\u043b\u0438: - tinkoff/invest/__init__.py - tinkoff/invest/async_services.py - tinkoff/invest/schemas.py - tinkoff/invest/services.py \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u041c\u043e\u0436\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u043e \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. make gen-client Release \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 make bump-version v=<new-version> \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 tag. \u041f\u043e\u0441\u043b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 tag-\u0430 \u0432 github git push --tags , \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u0430 \u0434\u0436\u043e\u0431\u0430 publish_pypi . \u0421\u0442\u043e\u0438\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e make bump-version , \u043a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u044b\u043b\u0438 \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u0433\u0438\u0442\u0435.","title":"\u0423\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435"},{"location":"CONTRIBUTING/#contributing","text":"\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 Tinkoff Invest!","title":"Contributing"},{"location":"CONTRIBUTING/#_1","text":"\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 fork \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0421\u043a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 \u0441\u0432\u043e\u0439 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 git clone https://github.com/Tinkoff/invest-python.git \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0434\u043b\u044f \u0432\u0430\u0448\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 git checkout -b branch_name \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435 (\u0441\u043c. \u043d\u0438\u0436\u0435) \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u043e\u0434 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0441\u0442\u043e\u0432 \u0438 \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432 \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441\u0432\u043e\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 (\u043c\u044b \u043f\u0440\u0438\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u0441\u044f \u044d\u0442\u0438\u0445 \u0441\u043e\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u0439) git add . git commit -m \"feat: add new feature\" \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0441\u0432\u043e\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430 github git push \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 Pull Request \u0432 \u044d\u0442\u043e\u0442 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442"},{"location":"CONTRIBUTING/#_2","text":"\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c poetry . \u0422\u0430\u043a\u0436\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0430\u0441\u043a \u0440\u0430\u043d\u043d\u0435\u0440 make.","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435"},{"location":"CONTRIBUTING/#_3","text":"pip install poetry make install","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439"},{"location":"CONTRIBUTING/#_4","text":"make test","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0442\u0435\u0441\u0442\u043e\u0432"},{"location":"CONTRIBUTING/#_5","text":"make lint make git-lint","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u0432"},{"location":"CONTRIBUTING/#using-gitlint-as-a-commit-msg-hook","text":"gitlint install-hook # To remove the hook gitlint uninstall-hook","title":"Using gitlint as a commit-msg hook"},{"location":"CONTRIBUTING/#_6","text":"make format","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u0430\u0432\u0442\u043e\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"CONTRIBUTING/#proto","text":"make download-protos \u041f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0432\u0435\u0442\u043a\u0438 main .","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"CONTRIBUTING/#_7","text":"make gen-grpc \u0417\u0430\u0442\u0435\u043c, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0443\u043b\u0438: - tinkoff/invest/__init__.py - tinkoff/invest/async_services.py - tinkoff/invest/schemas.py - tinkoff/invest/services.py","title":"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"CONTRIBUTING/#proto_1","text":"\u041c\u043e\u0436\u043d\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u043e \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. make gen-client","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 proto \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"CONTRIBUTING/#release","text":"make bump-version v=<new-version> \u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 tag. \u041f\u043e\u0441\u043b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 tag-\u0430 \u0432 github git push --tags , \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u0430 \u0434\u0436\u043e\u0431\u0430 publish_pypi . \u0421\u0442\u043e\u0438\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e make bump-version , \u043a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u044b\u043b\u0438 \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u0433\u0438\u0442\u0435.","title":"Release \u043d\u043e\u0432\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438"},{"location":"examples/","text":"\u0411\u043e\u043b\u044c\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0437\u0434\u0435\u0441\u044c . \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434 examples/all_candles.py import os from datetime import timedelta from tinkoff.invest import CandleInterval , Client from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : for candle in client . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 365 ), interval = CandleInterval . CANDLE_INTERVAL_HOUR , ): print ( candle ) return 0 if __name__ == \"__main__\" : main () \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434 examples/async_all_candles.py import asyncio import os from datetime import timedelta from tinkoff.invest import AsyncClient , CandleInterval from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : async for candle in client . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 365 ), interval = CandleInterval . CANDLE_INTERVAL_HOUR , ): print ( candle ) if __name__ == \"__main__\" : asyncio . run ( main ()) \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f examples/async_client.py import asyncio import os from tinkoff.invest import AsyncClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : print ( await client . users . get_accounts ()) if __name__ == \"__main__\" : asyncio . run ( main ()) \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 examples/async_retrying_client.py import asyncio import logging import os from datetime import timedelta from tinkoff.invest import CandleInterval from tinkoff.invest.retrying.aio.client import AsyncRetryingClient from tinkoff.invest.retrying.settings import RetryClientSettings from tinkoff.invest.utils import now logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] retry_settings = RetryClientSettings ( use_retry = True , max_retry_attempt = 2 ) async def main (): async with AsyncRetryingClient ( TOKEN , settings = retry_settings ) as client : async for candle in client . get_all_candles ( figi = \"BBG000B9XRY4\" , from_ = now () - timedelta ( days = 301 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle ) if __name__ == \"__main__\" : asyncio . run ( main ()) \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u043f\u043e \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u043c \u0441\u0432\u0435\u0447\u0430\u043c \u0438 \u0432\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c examples/async_stream_client.py import asyncio import os from tinkoff.invest import ( AsyncClient , CandleInstrument , MarketDataRequest , SubscribeCandlesRequest , SubscriptionAction , SubscriptionInterval , ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async def request_iterator (): yield MarketDataRequest ( subscribe_candles_request = SubscribeCandlesRequest ( subscription_action = SubscriptionAction . SUBSCRIPTION_ACTION_SUBSCRIBE , instruments = [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ], ) ) while True : await asyncio . sleep ( 1 ) async with AsyncClient ( TOKEN ) as client : async for marketdata in client . market_data_stream . market_data_stream ( request_iterator () ): print ( marketdata ) if __name__ == \"__main__\" : asyncio . run ( main ()) \u041e\u0442\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u0439 examples/cancel_orders.py import logging import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] logger = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO ) def main (): with Client ( TOKEN ) as client : response = client . users . get_accounts () account , * _ = response . accounts account_id = account . id logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) client . cancel_all_orders ( account_id = account . id ) logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) if __name__ == \"__main__\" : main () \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 examples/client.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : print ( client . users . get_accounts ()) if __name__ == \"__main__\" : main () \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u043f\u043e \u0438\u043d\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0443 examples/download_all_candles.py import logging import os from datetime import timedelta from pathlib import Path from tinkoff.invest import CandleInterval , Client from tinkoff.invest.caching.market_data_cache.cache_settings import ( MarketDataCacheSettings , ) from tinkoff.invest.services import MarketDataCache from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) def main (): with Client ( TOKEN ) as client : settings = MarketDataCacheSettings ( base_cache_dir = Path ( \"market_data_cache\" )) market_data_cache = MarketDataCache ( settings = settings , services = client ) for candle in market_data_cache . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 3 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle . time ) return 0 if __name__ == \"__main__\" : main () \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 examples/easy_async_stream_client.py import asyncio import os from tinkoff.invest import ( AsyncClient , CandleInstrument , InfoInstrument , SubscriptionInterval , ) from tinkoff.invest.async_services import AsyncMarketDataStreamManager TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : market_data_stream : AsyncMarketDataStreamManager = ( client . create_market_data_stream () ) market_data_stream . candles . subscribe ( [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ] ) async for marketdata in market_data_stream : print ( marketdata ) market_data_stream . info . subscribe ([ InfoInstrument ( figi = \"BBG004730N88\" )]) if marketdata . subscribe_info_response : market_data_stream . stop () if __name__ == \"__main__\" : asyncio . run ( main ()) \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 examples/easy_stream_client.py import os from tinkoff.invest import ( CandleInstrument , Client , InfoInstrument , SubscriptionInterval , ) from tinkoff.invest.services import MarketDataStreamManager TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : market_data_stream : MarketDataStreamManager = client . create_market_data_stream () market_data_stream . candles . subscribe ( [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ] ) for marketdata in market_data_stream : print ( marketdata ) market_data_stream . info . subscribe ([ InfoInstrument ( figi = \"BBG004730N88\" )]) if marketdata . subscribe_info_response : market_data_stream . stop () if __name__ == \"__main__\" : main () \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u0438\u0445 \u043f\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 examples/get_operations_by_cursor.py import os from tinkoff.invest import Client , GetOperationsByCursorRequest token = os . environ [ \"INVEST_TOKEN\" ] with Client ( token ) as client : accounts = client . users . get_accounts () account_id = accounts . accounts [ 0 ] . id def get_request ( cursor = \"\" ): return GetOperationsByCursorRequest ( account_id = account_id , instrument_id = \"BBG004730N88\" , cursor = cursor , limit = 1 , ) operations = client . operations . get_operations_by_cursor ( get_request ()) print ( operations ) while operations . has_next : request = get_request ( cursor = operations . next_cursor ) operations = client . operations . get_operations_by_cursor ( request ) print ( operations ) \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 examples/instrument_cache.py import logging import os from pprint import pprint from tinkoff.invest import Client , InstrumentIdType from tinkoff.invest.caching.instruments_cache.instruments_cache import InstrumentsCache from tinkoff.invest.caching.instruments_cache.settings import InstrumentsCacheSettings TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( level = logging . INFO ) def main (): with Client ( TOKEN ) as client : inst = client . instruments . etfs () . instruments [ - 1 ] pprint ( inst ) from_server = client . instruments . etf_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_UID , class_code = inst . class_code , id = inst . uid , ) pprint ( from_server ) settings = InstrumentsCacheSettings () instruments_cache = InstrumentsCache ( settings = settings , instruments_service = client . instruments ) from_cache = instruments_cache . etf_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_UID , class_code = inst . class_code , id = inst . uid , ) pprint ( from_cache ) if str ( from_server ) != str ( from_cache ): raise Exception ( \"cache miss\" ) if __name__ == \"__main__\" : main () \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 query examples/instruments.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : r = client . instruments . find_instrument ( query = \"\u0442\u0438\u043d\u044c\u043a\u043e\u0444\u0444\" ) for i in r . instruments : print ( i ) if __name__ == \"__main__\" : main () \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043b\u043e\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a examples/logger.py import logging import os from tinkoff.invest import Client , RequestError TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . INFO ) logger = logging . getLogger ( __name__ ) def main (): with Client ( TOKEN ) as client : _ = client . users . get_accounts () . accounts try : client . users . get_margin_attributes ( account_id = \"123\" ) except RequestError as err : tracking_id = err . metadata . tracking_id if err . metadata else \"\" logger . error ( \"Error tracking_id= %s code= %s \" , tracking_id , str ( err . code )) if __name__ == \"__main__\" : main () \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0440\u0442\u0444\u043e\u043b\u0438\u043e \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 examples/porfolio_stream_client.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : accounts = client . users . get_accounts () for portfolio in client . operations_stream . portfolio_stream ( accounts = [ acc . id for acc in accounts . accounts ] ): print ( portfolio ) if __name__ == \"__main__\" : main () \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 examples/positions_stream.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : response = client . users . get_accounts () accounts = [ account . id for account in response . accounts ] for response in client . operations_stream . positions_stream ( accounts = accounts ): print ( response ) if __name__ == \"__main__\" : main () \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 examples/retrying_client.py import logging import os from datetime import timedelta from tinkoff.invest import CandleInterval from tinkoff.invest.retrying.settings import RetryClientSettings from tinkoff.invest.retrying.sync.client import RetryingClient from tinkoff.invest.utils import now logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] retry_settings = RetryClientSettings ( use_retry = True , max_retry_attempt = 2 ) with RetryingClient ( TOKEN , settings = retry_settings ) as client : for candle in client . get_all_candles ( figi = \"BBG000B9XRY4\" , from_ = now () - timedelta ( days = 301 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle ) \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0435 examples/sandbox_client.py import os from tinkoff.invest.sandbox.client import SandboxClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with SandboxClient ( TOKEN ) as client : print ( client . users . get_info ()) if __name__ == \"__main__\" : main () \u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0438 \u0438\u0445 \u0432\u044b\u0432\u043e\u0434 examples/stream_client.py import os import time from tinkoff.invest import ( CandleInstrument , Client , MarketDataRequest , SubscribeCandlesRequest , SubscriptionAction , SubscriptionInterval , ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): def request_iterator (): yield MarketDataRequest ( subscribe_candles_request = SubscribeCandlesRequest ( waiting_close = True , subscription_action = SubscriptionAction . SUBSCRIPTION_ACTION_SUBSCRIBE , instruments = [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ], ) ) while True : time . sleep ( 1 ) with Client ( TOKEN ) as client : for marketdata in client . market_data_stream . market_data_stream ( request_iterator () ): print ( marketdata ) if __name__ == \"__main__\" : main ()","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"},{"location":"examples/#_1","text":"examples/all_candles.py import os from datetime import timedelta from tinkoff.invest import CandleInterval , Client from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : for candle in client . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 365 ), interval = CandleInterval . CANDLE_INTERVAL_HOUR , ): print ( candle ) return 0 if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434"},{"location":"examples/#_2","text":"examples/async_all_candles.py import asyncio import os from datetime import timedelta from tinkoff.invest import AsyncClient , CandleInterval from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : async for candle in client . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 365 ), interval = CandleInterval . CANDLE_INTERVAL_HOUR , ): print ( candle ) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0432\u0435\u0447\u0435\u0439 \u0441 \u0447\u0430\u0441\u043e\u0432\u044b\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c \u0437\u0430 \u0433\u043e\u0434"},{"location":"examples/#_3","text":"examples/async_client.py import asyncio import os from tinkoff.invest import AsyncClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : print ( await client . users . get_accounts ()) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"examples/#_4","text":"examples/async_retrying_client.py import asyncio import logging import os from datetime import timedelta from tinkoff.invest import CandleInterval from tinkoff.invest.retrying.aio.client import AsyncRetryingClient from tinkoff.invest.retrying.settings import RetryClientSettings from tinkoff.invest.utils import now logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] retry_settings = RetryClientSettings ( use_retry = True , max_retry_attempt = 2 ) async def main (): async with AsyncRetryingClient ( TOKEN , settings = retry_settings ) as client : async for candle in client . get_all_candles ( figi = \"BBG000B9XRY4\" , from_ = now () - timedelta ( days = 301 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle ) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439"},{"location":"examples/#_5","text":"examples/async_stream_client.py import asyncio import os from tinkoff.invest import ( AsyncClient , CandleInstrument , MarketDataRequest , SubscribeCandlesRequest , SubscriptionAction , SubscriptionInterval , ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async def request_iterator (): yield MarketDataRequest ( subscribe_candles_request = SubscribeCandlesRequest ( subscription_action = SubscriptionAction . SUBSCRIPTION_ACTION_SUBSCRIBE , instruments = [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ], ) ) while True : await asyncio . sleep ( 1 ) async with AsyncClient ( TOKEN ) as client : async for marketdata in client . market_data_stream . market_data_stream ( request_iterator () ): print ( marketdata ) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043a\u043e\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u043f\u043e \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u043c \u0441\u0432\u0435\u0447\u0430\u043c \u0438 \u0432\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c"},{"location":"examples/#_6","text":"examples/cancel_orders.py import logging import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] logger = logging . getLogger ( __name__ ) logging . basicConfig ( level = logging . INFO ) def main (): with Client ( TOKEN ) as client : response = client . users . get_accounts () account , * _ = response . accounts account_id = account . id logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) client . cancel_all_orders ( account_id = account . id ) logger . info ( \"Orders: %s \" , client . orders . get_orders ( account_id = account_id )) if __name__ == \"__main__\" : main ()","title":"\u041e\u0442\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u0439"},{"location":"examples/#_7","text":"examples/client.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : print ( client . users . get_accounts ()) if __name__ == \"__main__\" : main ()","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0447\u0435\u0442\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"examples/#_8","text":"examples/download_all_candles.py import logging import os from datetime import timedelta from pathlib import Path from tinkoff.invest import CandleInterval , Client from tinkoff.invest.caching.market_data_cache.cache_settings import ( MarketDataCacheSettings , ) from tinkoff.invest.services import MarketDataCache from tinkoff.invest.utils import now TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) def main (): with Client ( TOKEN ) as client : settings = MarketDataCacheSettings ( base_cache_dir = Path ( \"market_data_cache\" )) market_data_cache = MarketDataCache ( settings = settings , services = client ) for candle in market_data_cache . get_all_candles ( figi = \"BBG004730N88\" , from_ = now () - timedelta ( days = 3 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle . time ) return 0 if __name__ == \"__main__\" : main ()","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0432\u0441\u0435\u0445 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u043f\u043e \u0438\u043d\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0443"},{"location":"examples/#_9","text":"examples/easy_async_stream_client.py import asyncio import os from tinkoff.invest import ( AsyncClient , CandleInstrument , InfoInstrument , SubscriptionInterval , ) from tinkoff.invest.async_services import AsyncMarketDataStreamManager TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : market_data_stream : AsyncMarketDataStreamManager = ( client . create_market_data_stream () ) market_data_stream . candles . subscribe ( [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ] ) async for marketdata in market_data_stream : print ( marketdata ) market_data_stream . info . subscribe ([ InfoInstrument ( figi = \"BBG004730N88\" )]) if marketdata . subscribe_info_response : market_data_stream . stop () if __name__ == \"__main__\" : asyncio . run ( main ())","title":"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439"},{"location":"examples/#_10","text":"examples/easy_stream_client.py import os from tinkoff.invest import ( CandleInstrument , Client , InfoInstrument , SubscriptionInterval , ) from tinkoff.invest.services import MarketDataStreamManager TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : market_data_stream : MarketDataStreamManager = client . create_market_data_stream () market_data_stream . candles . subscribe ( [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ] ) for marketdata in market_data_stream : print ( marketdata ) market_data_stream . info . subscribe ([ InfoInstrument ( figi = \"BBG004730N88\" )]) if marketdata . subscribe_info_response : market_data_stream . stop () if __name__ == \"__main__\" : main ()","title":"\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439"},{"location":"examples/#_11","text":"examples/get_operations_by_cursor.py import os from tinkoff.invest import Client , GetOperationsByCursorRequest token = os . environ [ \"INVEST_TOKEN\" ] with Client ( token ) as client : accounts = client . users . get_accounts () account_id = accounts . accounts [ 0 ] . id def get_request ( cursor = \"\" ): return GetOperationsByCursorRequest ( account_id = account_id , instrument_id = \"BBG004730N88\" , cursor = cursor , limit = 1 , ) operations = client . operations . get_operations_by_cursor ( get_request ()) print ( operations ) while operations . has_next : request = get_request ( cursor = operations . next_cursor ) operations = client . operations . get_operations_by_cursor ( request ) print ( operations )","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u0438\u0445 \u043f\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434"},{"location":"examples/#_12","text":"examples/instrument_cache.py import logging import os from pprint import pprint from tinkoff.invest import Client , InstrumentIdType from tinkoff.invest.caching.instruments_cache.instruments_cache import InstrumentsCache from tinkoff.invest.caching.instruments_cache.settings import InstrumentsCacheSettings TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( level = logging . INFO ) def main (): with Client ( TOKEN ) as client : inst = client . instruments . etfs () . instruments [ - 1 ] pprint ( inst ) from_server = client . instruments . etf_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_UID , class_code = inst . class_code , id = inst . uid , ) pprint ( from_server ) settings = InstrumentsCacheSettings () instruments_cache = InstrumentsCache ( settings = settings , instruments_service = client . instruments ) from_cache = instruments_cache . etf_by ( id_type = InstrumentIdType . INSTRUMENT_ID_TYPE_UID , class_code = inst . class_code , id = inst . uid , ) pprint ( from_cache ) if str ( from_server ) != str ( from_cache ): raise Exception ( \"cache miss\" ) if __name__ == \"__main__\" : main ()","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432"},{"location":"examples/#query","text":"examples/instruments.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : r = client . instruments . find_instrument ( query = \"\u0442\u0438\u043d\u044c\u043a\u043e\u0444\u0444\" ) for i in r . instruments : print ( i ) if __name__ == \"__main__\" : main ()","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u043f\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 query"},{"location":"examples/#_13","text":"examples/logger.py import logging import os from tinkoff.invest import Client , RequestError TOKEN = os . environ [ \"INVEST_TOKEN\" ] logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . INFO ) logger = logging . getLogger ( __name__ ) def main (): with Client ( TOKEN ) as client : _ = client . users . get_accounts () . accounts try : client . users . get_margin_attributes ( account_id = \"123\" ) except RequestError as err : tracking_id = err . metadata . tracking_id if err . metadata else \"\" logger . error ( \"Error tracking_id= %s code= %s \" , tracking_id , str ( err . code )) if __name__ == \"__main__\" : main ()","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043b\u043e\u0433\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a"},{"location":"examples/#_14","text":"examples/porfolio_stream_client.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : accounts = client . users . get_accounts () for portfolio in client . operations_stream . portfolio_stream ( accounts = [ acc . id for acc in accounts . accounts ] ): print ( portfolio ) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0440\u0442\u0444\u043e\u043b\u0438\u043e \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438"},{"location":"examples/#_15","text":"examples/positions_stream.py import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : response = client . users . get_accounts () accounts = [ account . id for account in response . accounts ] for response in client . operations_stream . positions_stream ( accounts = accounts ): print ( response ) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438"},{"location":"examples/#_16","text":"examples/retrying_client.py import logging import os from datetime import timedelta from tinkoff.invest import CandleInterval from tinkoff.invest.retrying.settings import RetryClientSettings from tinkoff.invest.retrying.sync.client import RetryingClient from tinkoff.invest.utils import now logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . DEBUG ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] retry_settings = RetryClientSettings ( use_retry = True , max_retry_attempt = 2 ) with RetryingClient ( TOKEN , settings = retry_settings ) as client : for candle in client . get_all_candles ( figi = \"BBG000B9XRY4\" , from_ = now () - timedelta ( days = 301 ), interval = CandleInterval . CANDLE_INTERVAL_1_MIN , ): print ( candle )","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439"},{"location":"examples/#_17","text":"examples/sandbox_client.py import os from tinkoff.invest.sandbox.client import SandboxClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with SandboxClient ( TOKEN ) as client : print ( client . users . get_info ()) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0435"},{"location":"examples/#_18","text":"examples/stream_client.py import os import time from tinkoff.invest import ( CandleInstrument , Client , MarketDataRequest , SubscribeCandlesRequest , SubscriptionAction , SubscriptionInterval , ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): def request_iterator (): yield MarketDataRequest ( subscribe_candles_request = SubscribeCandlesRequest ( waiting_close = True , subscription_action = SubscriptionAction . SUBSCRIPTION_ACTION_SUBSCRIBE , instruments = [ CandleInstrument ( figi = \"BBG004730N88\" , interval = SubscriptionInterval . SUBSCRIPTION_INTERVAL_ONE_MINUTE , ) ], ) ) while True : time . sleep ( 1 ) with Client ( TOKEN ) as client : for marketdata in client . market_data_stream . market_data_stream ( request_iterator () ): print ( marketdata ) if __name__ == \"__main__\" : main ()","title":"\u041f\u043e\u0434\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c \u043c\u0438\u043d\u0443\u0442\u043d\u044b\u0445 \u0441\u0432\u0435\u0447\u0435\u0439 \u0438 \u0438\u0445 \u0432\u044b\u0432\u043e\u0434"},{"location":"robots/","text":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u043e\u0432 \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 tromario/tinkoff-invest-volume-analysis-robot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043e\u0434\u0438\u043d \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u043c \u0440\u044b\u043d\u043a\u0430 - \u0440\u0435\u0430\u043a\u0446\u0438\u044f \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043c \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u043d\u044f \u0437\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043e\u0431\u044a\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0437\u0430\u043b\u043e\u0436\u0435\u043d \u0432 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043f\u043f\u0430\u0440\u0430\u0442. \u0420\u0430\u0431\u043e\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430. qwertyo1/tinkoff-trading-bot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f. \u041d\u0435\u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0431\u044b\u0441\u0442\u0440\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f, \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u043e\u0440\u0433\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u043f\u043e\u0434 \u0441\u0432\u043e\u0438 \u0446\u0435\u043b\u0438. \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 sqllite. karpp/investRobot investRobot - \u044d\u0442\u043e \u0440\u043e\u0431\u043e\u0442 \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439 \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c Tinkoff Invest API. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043e\u0434\u043d\u0430 \u0442\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u0435 \u0434\u0432\u0443\u0445 \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0438\u0445 \u0441\u0440\u0435\u0434\u043d\u0438\u0445. EIDiamond/invest-bot \u0420\u043e\u0431\u043e\u0442 \u0438\u043d\u0442\u0440\u0430\u0434\u0435\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u0431\u0438\u0440\u0436\u0435 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e \u0441\u0434\u0435\u043b\u043a\u0430\u0445 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u0432 Telegram \u0447\u0430\u0442.\u0423\u0434\u043e\u0431\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\\\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c. \u0411\u0435\u0437 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442\u0430 \u0432\u0441\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0438\u0448\u0443\u0442\u0441\u044f \u0432 \u043b\u043e\u0433 \u0444\u0430\u0439\u043b. \u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438 \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438 (\"ma200_support_action\"), \u043a\u0443\u0434\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0438\u0433\u043d\u0430\u043b\u044b \u043d\u0430 \u0448\u043e\u0440\u0442 \u0438\u043b\u0438 \u043b\u043e\u043d\u0433 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c. \u0417\u0430\u0442\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u043a\u0446\u0438\u0439, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0438\u0448\u043b\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u0442\u044b \u0441\u0438\u0433\u043d\u0430\u043b\u0430. import logging import os from datetime import timedelta from decimal import Decimal from tinkoff.invest import CandleInterval , Client from tinkoff.invest.strategies.base.account_manager import AccountManager from tinkoff.invest.strategies.moving_average.signal_executor import ( MovingAverageSignalExecutor , ) from tinkoff.invest.strategies.moving_average.strategy import MovingAverageStrategy from tinkoff.invest.strategies.moving_average.strategy_settings import ( MovingAverageStrategySettings , ) from tinkoff.invest.strategies.moving_average.strategy_state import ( MovingAverageStrategyState , ) from tinkoff.invest.strategies.moving_average.trader import MovingAverageStrategyTrader logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . INFO ) logger = logging . getLogger ( __name__ ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] FIGI = os . environ [ \"INVEST_FIGI\" ] ACCOUNT_ID = os . environ [ \"INVEST_ACCOUNT_ID\" ] def main (): with Client ( TOKEN ) as services : settings = MovingAverageStrategySettings ( share_id = FIGI , account_id = ACCOUNT_ID , max_transaction_price = Decimal ( 10000 ), candle_interval = CandleInterval . CANDLE_INTERVAL_1_MIN , long_period = timedelta ( minutes = 100 ), short_period = timedelta ( minutes = 20 ), std_period = timedelta ( minutes = 30 ), ) account_manager = AccountManager ( services = services , strategy_settings = settings ) state = MovingAverageStrategyState () strategy = MovingAverageStrategy ( settings = settings , account_manager = account_manager , state = state , ) signal_executor = MovingAverageSignalExecutor ( services = services , state = state , settings = settings , ) trader = MovingAverageStrategyTrader ( strategy = strategy , settings = settings , services = services , state = state , signal_executor = signal_executor , account_manager = account_manager , ) initial_balance = account_manager . get_current_balance () for i in range ( 5 ): logger . info ( \"Trade %s \" , i ) trader . trade () current_balance = account_manager . get_current_balance () logger . info ( \"Initial balance %s \" , initial_balance ) logger . info ( \"Current balance %s \" , current_balance ) strategy . plot ()","title":"\u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"robots/#_1","text":"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 tromario/tinkoff-invest-volume-analysis-robot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043e\u0434\u0438\u043d \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u043c \u0440\u044b\u043d\u043a\u0430 - \u0440\u0435\u0430\u043a\u0446\u0438\u044f \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043c \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u043d\u044f \u0437\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434.\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043e\u0431\u044a\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0437\u0430\u043b\u043e\u0436\u0435\u043d \u0432 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0430\u043f\u043f\u0430\u0440\u0430\u0442. \u0420\u0430\u0431\u043e\u0442\u0430 \u0438\u043c\u0435\u0435\u0442 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430. qwertyo1/tinkoff-trading-bot \u041f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f. \u041d\u0435\u0441\u043b\u043e\u0436\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0431\u044b\u0441\u0442\u0440\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f, \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0438 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u043e\u0440\u0433\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e \u043f\u043e\u0434 \u0441\u0432\u043e\u0438 \u0446\u0435\u043b\u0438. \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 sqllite. karpp/investRobot investRobot - \u044d\u0442\u043e \u0440\u043e\u0431\u043e\u0442 \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u0431\u0438\u0440\u0436\u0435 \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444 \u0418\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439 \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c Tinkoff Invest API. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043e\u0434\u043d\u0430 \u0442\u043e\u0440\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0438\u043d\u0434\u0438\u043a\u0430\u0442\u043e\u0440\u0435 \u0434\u0432\u0443\u0445 \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0438\u0445 \u0441\u0440\u0435\u0434\u043d\u0438\u0445. EIDiamond/invest-bot \u0420\u043e\u0431\u043e\u0442 \u0438\u043d\u0442\u0440\u0430\u0434\u0435\u0439 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u043d\u0430 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u0431\u0438\u0440\u0436\u0435 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e \u0441\u0434\u0435\u043b\u043a\u0430\u0445 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0442\u043e\u0440\u0433\u043e\u0432\u043b\u0438 \u0432 Telegram \u0447\u0430\u0442.\u0423\u0434\u043e\u0431\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\\\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c. \u0411\u0435\u0437 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442\u0430 \u0432\u0441\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0438\u0448\u0443\u0442\u0441\u044f \u0432 \u043b\u043e\u0433 \u0444\u0430\u0439\u043b.","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u043e\u0432"},{"location":"robots/#_2","text":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u043c\u0438 (\"ma200_support_action\"), \u043a\u0443\u0434\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0438\u0433\u043d\u0430\u043b\u044b \u043d\u0430 \u0448\u043e\u0440\u0442 \u0438\u043b\u0438 \u043b\u043e\u043d\u0433 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c. \u0417\u0430\u0442\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u043a\u0446\u0438\u0439, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0438\u0448\u043b\u0438 \u0441\u0438\u0433\u043d\u0430\u043b\u044b, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u0442\u044b \u0441\u0438\u0433\u043d\u0430\u043b\u0430. import logging import os from datetime import timedelta from decimal import Decimal from tinkoff.invest import CandleInterval , Client from tinkoff.invest.strategies.base.account_manager import AccountManager from tinkoff.invest.strategies.moving_average.signal_executor import ( MovingAverageSignalExecutor , ) from tinkoff.invest.strategies.moving_average.strategy import MovingAverageStrategy from tinkoff.invest.strategies.moving_average.strategy_settings import ( MovingAverageStrategySettings , ) from tinkoff.invest.strategies.moving_average.strategy_state import ( MovingAverageStrategyState , ) from tinkoff.invest.strategies.moving_average.trader import MovingAverageStrategyTrader logging . basicConfig ( format = \" %(asctime)s %(levelname)s : %(message)s \" , level = logging . INFO ) logger = logging . getLogger ( __name__ ) TOKEN = os . environ [ \"INVEST_TOKEN\" ] FIGI = os . environ [ \"INVEST_FIGI\" ] ACCOUNT_ID = os . environ [ \"INVEST_ACCOUNT_ID\" ] def main (): with Client ( TOKEN ) as services : settings = MovingAverageStrategySettings ( share_id = FIGI , account_id = ACCOUNT_ID , max_transaction_price = Decimal ( 10000 ), candle_interval = CandleInterval . CANDLE_INTERVAL_1_MIN , long_period = timedelta ( minutes = 100 ), short_period = timedelta ( minutes = 20 ), std_period = timedelta ( minutes = 30 ), ) account_manager = AccountManager ( services = services , strategy_settings = settings ) state = MovingAverageStrategyState () strategy = MovingAverageStrategy ( settings = settings , account_manager = account_manager , state = state , ) signal_executor = MovingAverageSignalExecutor ( services = services , state = state , settings = settings , ) trader = MovingAverageStrategyTrader ( strategy = strategy , settings = settings , services = services , state = state , signal_executor = signal_executor , account_manager = account_manager , ) initial_balance = account_manager . get_current_balance () for i in range ( 5 ): logger . info ( \"Trade %s \" , i ) trader . trade () current_balance = account_manager . get_current_balance () logger . info ( \"Initial balance %s \" , initial_balance ) logger . info ( \"Current balance %s \" , current_balance ) strategy . plot ()","title":"\u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0438"},{"location":"api/clients/","text":"Clients AsyncClient import asyncio import os from tinkoff.invest import AsyncClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : print ( await client . users . get_accounts ()) if __name__ == \"__main__\" : asyncio . run ( main ()) Client import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : print ( client . users . get_accounts ())","title":"Clients"},{"location":"api/clients/#clients","text":"","title":"Clients"},{"location":"api/clients/#tinkoff.invest.clients.AsyncClient","text":"import asyncio import os from tinkoff.invest import AsyncClient TOKEN = os . environ [ \"INVEST_TOKEN\" ] async def main (): async with AsyncClient ( TOKEN ) as client : print ( await client . users . get_accounts ()) if __name__ == \"__main__\" : asyncio . run ( main ())","title":"AsyncClient"},{"location":"api/clients/#tinkoff.invest.clients.Client","text":"import os from tinkoff.invest import Client TOKEN = os . environ [ \"INVEST_TOKEN\" ] def main (): with Client ( TOKEN ) as client : print ( client . users . get_accounts ())","title":"Client"}]}